<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thoughts from Alan</title>
    <link>https://alanwu.space/</link>
    <description>Thoughts from Alan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Sep 2025 00:00:01 -0400</lastBuildDate>
    
    <atom:link href="https://alanwu.space/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ARM64&#39;s MOVN instruction is clever</title>
      <link>https://alanwu.space/post/arm64-movn/</link>
      <pubDate>Tue, 16 Sep 2025 00:00:01 -0400</pubDate>
      
      <guid>https://alanwu.space/post/arm64-movn/</guid>
      <description>&lt;p&gt;The bit twiddling office called. They want a function to compute a sequence of
ARM64 instructions that fills a register with an arbitrary constant 64-bit
number.&lt;/p&gt;
&lt;h2 id=&#34;zeros-in-positive-number&#34;&gt;Zeros in positive number&lt;/h2&gt;
&lt;p&gt;All ARM64 instructions are 32 bits long, so one instruction can&amp;rsquo;t possibly
handle all 64-bit patterns. One straightforward way to assemble the desired bit
pattern is to use
&lt;a href=&#34;https://developer.arm.com/documentation/ddi0602/2025-06/Base-Instructions/MOVK--Move-wide-with-keep-?lang=en&#34;&gt;&lt;code&gt;MOVK&lt;/code&gt;&lt;/a&gt;
which sets any one of the four 16-bit chunks of the register without touching
any other chunks. So, four &lt;code&gt;MOVK&lt;/code&gt; instructions can assemble any 64-bit pattern.&lt;/p&gt;
&lt;p&gt;Adding &lt;a href=&#34;https://developer.arm.com/documentation/ddi0602/2025-06/Base-Instructions/MOVZ--Move-wide-with-zero-?lang=en&#34;&gt;&lt;code&gt;MOVZ&lt;/code&gt;&lt;/a&gt; to the mix improves this strategy. Small numbers have many zeros
in the pattern, so we&amp;rsquo;d rather start by zeroing the whole register than
zeroing out one 16-bit chunk at a time with &lt;code&gt;MOVK&lt;/code&gt;. In one go, &lt;code&gt;MOVZ&lt;/code&gt; sets one
16-bit chunk to the desired value and also zeros out all other chunks. For
small numbers like 7, all we need is one &lt;code&gt;MOVZ&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-negative-ones&#34;&gt;The negative ones&lt;/h2&gt;
&lt;p&gt;Another instruction in the same family is
&lt;a href=&#34;https://developer.arm.com/documentation/ddi0602/2025-06/Base-Instructions/MOVN--Move-wide-with-NOT-?lang=en&#34;&gt;&lt;code&gt;MOVN&lt;/code&gt;&lt;/a&gt;.
It sets the register like &lt;code&gt;MOVZ&lt;/code&gt;, but with all bits inverted. So, &lt;code&gt;MOVN&lt;/code&gt; sets
the three chunks that are not directly encoded in the instruction to all ones.
Why would you want so many ones? Negative numbers!&lt;/p&gt;
&lt;p&gt;The most significant bit of a two&amp;rsquo;s complement number contributes negatively to
the value tally unlike the rest of the bits. Adding a leading one to the bit
string makes the old most significant bit at position K go from having a value
of -2&lt;sup&gt;K&lt;/sup&gt; to 2&lt;sup&gt;K&lt;/sup&gt;, adding
2â€¢2&lt;sup&gt;K&lt;/sup&gt;=2&lt;sup&gt;K+1&lt;/sup&gt; to the balance. The new leading one at K+1 has
value -2&lt;sup&gt;K+1&lt;/sup&gt;
, though, so adding a leading one preserves
the numeric value of the encoded number. This is one way to see why -1 is
encoded as all bits ones. Start with a single one and add leading ones.&lt;/p&gt;
&lt;p&gt;Leading ones are to negative numbers what leading zeros are to positive
numbers. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h2 id=&#34;strategy-using-movn&#34;&gt;Strategy using &lt;code&gt;MOVN&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;MOVN&lt;/code&gt; and &lt;code&gt;MOVK&lt;/code&gt; gives a pretty good strategy for negative numbers.
Sometimes, the whole sequence takes fewer than 64 bits. That&amp;rsquo;s shorter
than &lt;code&gt;movabs&lt;/code&gt; from x86-64, which uses a 64-bit immediate.&lt;/p&gt;
&lt;p&gt;For the constant &lt;code&gt;N&lt;/code&gt;, pick a 16-bit chunk in that is not all bits set and use a
&lt;code&gt;MOVN&lt;/code&gt; to set the chunk, filling all other chunks with ones as well. If no such
chunk exists, then all bits are set, and we&amp;rsquo;re done with a single &lt;code&gt;MOVN&lt;/code&gt;.
Otherwise, set other chunks of &lt;code&gt;N&lt;/code&gt; with &lt;code&gt;MOVK&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If there is even a single 16-bit chunk of ones in &lt;code&gt;N&lt;/code&gt;, the initial &lt;code&gt;MOVN&lt;/code&gt;
finishes setting two chunks or more in one go, beating out only using &lt;code&gt;MOVK&lt;/code&gt;.
&lt;code&gt;MOVZ&lt;/code&gt; covers positive numbers and &lt;code&gt;MOVN&lt;/code&gt; covers the negatives.&lt;/p&gt;
&lt;p&gt;This strategy is not limited to negative numbers. For example, it
sets &lt;code&gt;0x7000_ffff_cafe_ffff&lt;/code&gt; with just two instructions.&lt;/p&gt;
&lt;h2 id=&#34;play-with-it&#34;&gt;Play with it!&lt;/h2&gt;
&lt;p&gt;On a browser with WASM support, there should be an interactive toy below that
implements the &lt;code&gt;MOVN&lt;/code&gt; strategy. It only uses &lt;code&gt;MOVN&lt;/code&gt; and &lt;code&gt;MOVK&lt;/code&gt;, so
don&amp;rsquo;t expect the shortest possible sequence for all inputs. (For one, it won&amp;rsquo;t attempt to use
a &lt;a href=&#34;https://dougallj.wordpress.com/2021/10/30/bit-twiddling-optimising-aarch64-logical-immediate-encoding-and-decoding/&#34;&gt;bitmask
immediate&lt;/a&gt;.)
It&amp;rsquo;s made with &lt;a href=&#34;https://github.com/capstone-rust/capstone-rs&#34;&gt;&lt;code&gt;capstone-rs&lt;/code&gt;&lt;/a&gt;
compiled through
&lt;a href=&#34;https://doc.rust-lang.org/stable/rustc/platform-support/wasm32-unknown-emscripten.html&#34;&gt;&lt;code&gt;wasm32-unknown-emscripten&lt;/code&gt;&lt;/a&gt;.
Please excuse the huge 3MB download size &amp;ndash; I made no effort minimizing it.&lt;/p&gt;

&lt;input type=&#34;text&#34; id=&#34;constantInput&#34; value=&#34;0x7000_ffff_cafe_ffff&#34;&gt;&lt;/input&gt;
&lt;br&gt;
&lt;pre id=&#34;disasmOutput&#34;&gt;&lt;/pre&gt;
&lt;script&gt;
    Module = {
        noExitRuntime: true,
        onRuntimeInitialized() {
            // XXX: Synced with RUST
            const DISASM_TEXT_SIZE = 0x400

            // Smoke test inputs:
            // * the unsigned and signed representation of boundary values 
            // * 0
            // * -0x8000_0000_0000_0000, 0x8000_0000_0000_0000
            // * -1, 0xffff_ffff_ffff_ffff
            // * Just-out-of-range values

            constantInput.addEventListener(&#34;input&#34;, event =&gt; {
                disasmOutput.textContent = &#34;Failed to parse input as a number&#34;
                let input = event.target.value
                input = input.trim()
                if (!input) return

                // Support underscore separators
                input = input.replace(/_/g, &#34;&#34;)

                // BigInt doesn&#39;t support negative hex values like -0x8,
                // so we hack it in here. Doesn&#39;t support 0b and 0o.
                let neg_hex = input.match(/^-0x\p{Hex_Digit}+$/u)
                if (neg_hex) input = input.substring(1)
                try {
                    n = BigInt(input)
                } catch (_) {
                    return // already shown error above.
                }
                if (neg_hex) n = -n

                if (n &gt; 0xffff_ffff_ffff_ffffn || n &lt; -0x8000_0000_0000_0000n) {
                    disasmOutput.textContent = &#34;Number is too big to encode in 64 bits&#34;
                    return
                }

                let disasm = Module._malloc(DISASM_TEXT_SIZE)
                Module.ccall(&#34;disasm&#34;, &#34;number&#34;, [&#34;number&#34;, &#34;number&#34;], [n, disasm])
                let disasm_text = Module.UTF8ToString(disasm)
                Module._free(disasm)
                disasmOutput.textContent = disasm_text
            })
            constantInput.dispatchEvent(new InputEvent(&#34;input&#34;))
        }
    }
&lt;/script&gt;
&lt;script src=&#34;https://alanwu.space/arm64_movn.js&#34; defer&gt;&lt;/script&gt;


&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;It follows that &lt;a href=&#34;https://doc.rust-lang.org/std/primitive.u64.html#method.leading_zeros&#34;&gt;&lt;code&gt;n.leading_zeros() + n.leading_ones() + 1&lt;/code&gt;&lt;/a&gt; gives the
minimum number of bits it takes to encode &lt;code&gt;n&lt;/code&gt;. One of the terms in the sum
is always zero.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>No Ephemerons in Ruby&#39;s WeakMap</title>
      <link>https://alanwu.space/post/no-ephemerons-in-ruby/</link>
      <pubDate>Mon, 17 Feb 2025 00:30:00 -0500</pubDate>
      
      <guid>https://alanwu.space/post/no-ephemerons-in-ruby/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say you want to associate a property with an object, but you don&amp;rsquo;t want
to write to the object directly, maybe for design reasons or logistical reasons.
(What if the object is frozen and immutable?) You can use &lt;code&gt;WeakMap&lt;/code&gt; for this,
and the garbage collector is free to collect keys of the map:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ObjectSpace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WeakMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;object&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;object&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;member?(object) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is an issue with this demo, however. Currently, Ruby&amp;rsquo;s &lt;code&gt;WeakMap&lt;/code&gt;
doesn&amp;rsquo;t keep the values of the map alive, so the map evicts the pair in the
demo after a garbage collection run, even though the key survives:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;object &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;map &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ObjectSpace&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WeakMap&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;map&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;object&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;object&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;member?(object) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p map&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;member?(object) &lt;span style=&#34;color:#75715e&#34;&gt;# =&amp;gt; false, as of Ruby 3.4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, you can have the property, but it may go away when the collector decides to
run. A bit unruly, but alright for some situations.&lt;/p&gt;
&lt;p&gt;ECMAScript also offers &lt;code&gt;WeakMap&lt;/code&gt;, and they come with ephemerons. I like them
because they sound like mystical creatures. Practically, they deliver a
reliable way to achieve my contrived stated purpose. Nothing in the word &amp;ldquo;weak&amp;rdquo;
and &amp;ldquo;map&amp;rdquo; indicate that ephemerons are involved, but the spec links to the 1997
paper by Barry Hayes that introduced the mechanism.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a program you can run in your browser to get a taste of their semantics:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Make an object, and log when it becomes garbage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;registry&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FinalizationRegistry&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;is garbage&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;registry&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;register&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Put the object into a WeakMap and have the value reference itself
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WeakMap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;map&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Stop referring to the object through the local.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// FireFox collects after a few seconds.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From my admittedly imperfect understanding, they offer a sort of one-way
conditional liveness, where in a pair the value is live if the key is. Further,
values kept alive solely due to this mechanism cannot &amp;ldquo;upgrade&amp;rdquo; their liveness
to stay alive forever by way of reference cycles. Implementing ephemerons in
practice seems to require &lt;a href=&#34;https://blog.mozilla.org/sfink/2022/06/09/ephemeron-tables-aka-javascript-weakmaps/&#34;&gt;discovering them to a fixed-point&lt;/a&gt; after the
usual object tracing &amp;ndash; their special kind of liveness seems to call for
tracing under a different mode.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Betting on Linux</title>
      <link>https://alanwu.space/post/betting-on-linux/</link>
      <pubDate>Sun, 29 Dec 2024 22:08:00 -0500</pubDate>
      
      <guid>https://alanwu.space/post/betting-on-linux/</guid>
      <description>&lt;p&gt;Recently, I took a distribution version update for a Ubuntu system with a GTX
460 and I ended up spending a few hours to find out that the proprietary driver
no longer works with the newest kernels. The open source &lt;code&gt;nouveau&lt;/code&gt; driver
didn&amp;rsquo;t handle the decade old card any better. I had to downgrade to an older
LTS kernel and use Nvidia&amp;rsquo;s driver.&lt;/p&gt;
&lt;p&gt;A different machine of mine running Raven Ridge integrated graphics recently
also started to have issues. It freezes and dumps scary red text about &lt;code&gt;amdgpu&lt;/code&gt;
to the kernel ring buffer. This reminds me of when I first bought the machine
in 2018, when Raven Ridge was new and the drivers for it nascent. It eventually
stabilized, but now the crashes are back.&lt;/p&gt;
&lt;p&gt;Despite all the woes, I&amp;rsquo;m getting the Pine64 Note, an eReader running mainline
Linux. I&amp;rsquo;ll probably have problems with it. The userland is new, and maybe the
graphics drivers will flake out on me, but I&amp;rsquo;m going with it anyways.&lt;/p&gt;
&lt;p&gt;This is an aspirational purchase. I want to read more. Glance away from the
ultraprocessed flashing lights designed to monetize my attention. Also,
diagnosing these issues doesn&amp;rsquo;t seem like the worst hobby. To borrow from the
chapter about sunsets in &lt;em&gt;The Anthropocene Reviewed&lt;/em&gt;, &amp;ldquo;I want to be earnest,
even if it&amp;rsquo;s embarrassing.&amp;rdquo; I want to get out of my armor of cynicism and be
vulnerable.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linking Rust and C: Practicing Symbol Hygiene</title>
      <link>https://alanwu.space/post/symbol-hygiene/</link>
      <pubDate>Tue, 14 Feb 2023 16:08:02 +0000</pubDate>
      
      <guid>https://alanwu.space/post/symbol-hygiene/</guid>
      <description>&lt;p&gt;This is a post about the bits and pieces I learned while trying to fix a symbol
leakage problem for YJIT-enabled Ruby. The symbols I&amp;rsquo;m talking about are the
labels in object, executable, and shared library files that help linkers work.&lt;/p&gt;
&lt;p&gt;Thinking back to my first few contacts with linkers, I found them somewhat
mysterious. I think this is because I get errors from compilers more frequently
than from linkers. Also, compared to compilers, linkers are generally in a
worse vantage point for giving context-rich error messages that use familiar
programming language level terms.&lt;/p&gt;
&lt;p&gt;This post is pretty much all about linking on Unix-like systems. I hope my
adventures with various linkers here can cut their mystic a bit.&lt;/p&gt;
&lt;h2 id=&#34;linking-two-rust-staticlibs-together&#34;&gt;Linking two Rust &lt;code&gt;staticlibs&lt;/code&gt; together?&lt;/h2&gt;
&lt;p&gt;A good reason for caring about the list of symbols available in a static
library is that it helps to avoid link-time conflicts. Generally speaking,
linkers complain when there are multiple symbol definitions with identical
names. There is ambiguity as to which definition the linker should pick in
these situations, so they choose to error out. Savvy users might know about the
&lt;code&gt;--allow-multiple-definition&lt;/code&gt; option or equivalents, so it&amp;rsquo;s not an
insurmountable problem. However, these options are instructions for resolving
conflicts, each with different tradeoffs. It&amp;rsquo;s nicer for static library
consumers when there are no conflicts in the first place.&lt;/p&gt;
&lt;p&gt;This brings us to &lt;a href=&#34;https://github.com/rust-lang/rust/issues/44322&#34;&gt;&lt;code&gt;rust-lang/rust#44322&lt;/code&gt;&lt;/a&gt;. To summarize the issue, two Rust
staticlibs can link without conflicts when &lt;a href=&#34;https://doc.rust-lang.org/rustc/codegen-options/index.html#lto&#34;&gt;LTO&lt;/a&gt; is off and fail to link when
LTO is on. As of Rust 1.67.1, support for generating staticlibs that link well
together is spotty.&lt;/p&gt;
&lt;h2 id=&#34;impact-to-yjit&#34;&gt;Impact to YJIT&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;CRuby&lt;/a&gt; can be configured to build as a static library or a shared library.
YJIT, the Rust component, is optional. Users can choose to build Ruby without
it.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you&amp;rsquo;ve been linking against the CRuby static library before YJIT was
an option. You also link against some unrelated Rust staticlibs, maybe prebuilt
ones. A new CRuby release rolls around, and you decide to try out YJIT. You
build the new YJIT-enabled CRuby static library and pass it to your old build
setup. What happens?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;lib2.cgu-0.rs:(.text.rust_eh_personality+0x0): multiple definition of `rust_eh_personality&#39;
&amp;hellip;&lt;/p&gt;
&lt;p&gt;collect2: error: ld returned 1 exit status&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Oof. Not fun. Who&amp;rsquo;s &lt;code&gt;collect2&lt;/code&gt; and what&amp;rsquo;s &lt;code&gt;rust_eh_personality&lt;/code&gt; anyways? Maybe
you decide to disable YJIT because it&amp;rsquo;s the new thing that causes build
problems for you. YJIT loses a user.&lt;/p&gt;
&lt;p&gt;Zooming out from this admittedly contrived user story, the general point here
is that YJIT, by changing the list of symbols that are visible in Ruby&amp;rsquo;s static
library, can cause build failures for consumers. The list of symbols available
in a static library has a close relation to its public interface, so you
shouldn&amp;rsquo;t even need to fully subscribe to &lt;a href=&#34;https://www.hyrumslaw.com&#34;&gt;Hyrum&amp;rsquo;s Law&lt;/a&gt; to see how changing the
list can cause problems.&lt;/p&gt;
&lt;h2 id=&#34;earlier&#34;&gt;How linkers handle static libraries (archive libraries)&lt;/h2&gt;
&lt;p&gt;Structurally, static libraries are not much more than a collection (an archive,
if you will) of object files. Passing a static library to the linker is not
equivalent to passing all of its member objects, though. Traditionally,
linkers pull objects out of archives on an as-needed basis. Say we have an
archive, &lt;code&gt;libmy.a&lt;/code&gt;. Inside, we have &lt;code&gt;a.o&lt;/code&gt;, which defines &lt;code&gt;_a&lt;/code&gt;, and
&lt;code&gt;b.o&lt;/code&gt; which defines &lt;code&gt;_b&lt;/code&gt;. When we only need &lt;code&gt;_a&lt;/code&gt;, the linker would only
link against &lt;code&gt;a.o&lt;/code&gt;; &lt;code&gt;b.o&lt;/code&gt; would not be extracted from the archive. Some
static libraries take advantage of this behavior to help users get smaller
final images. For example, in the musl libc archive Alpine Linux ships,
each library function gets their own object (try &lt;code&gt;ar t /usr/lib/libc.a&lt;/code&gt;).
Only the libc functions you use end up in the final image.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This selective linking behavior can mask multiple definition errors.&lt;/em&gt; Let&amp;rsquo;s
look at a concrete reproducer for &lt;a href=&#34;https://github.com/rust-lang/rust/issues/44322&#34;&gt;&lt;code&gt;rust-lang/rust#44322&lt;/code&gt;&lt;/a&gt; and look at what
objects the linker chooses to extract.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is repro.sh. It assumes you&amp;#39;re working with GNU Binutils.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run in an empty directory.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RUSTC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rustc +1.67.1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Your distro&amp;#39;s rustc might not support this +... syntax.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CODEGEN_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-O&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;lto&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CODEGEN_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CODEGEN_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -Clto&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -o errexit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -o nounset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -o xtrace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make libone.a. It defines the &amp;#34;_one&amp;#34; symbol.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#[no_mangle] pub extern &amp;#34;C&amp;#34; fn one() -&amp;gt; std::ffi::c_int { 1 }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | $RUSTC $CODEGEN_OPTS --crate-type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;staticlib -o libone.a -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make libtwo.a. It defines the &amp;#34;_two&amp;#34; symbol.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#[no_mangle] pub extern &amp;#34;C&amp;#34; fn two() -&amp;gt; std::ffi::c_int { 2 }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | $RUSTC $CODEGEN_OPTS --crate-type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;staticlib -o libtwo.a -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Make my.o, which calls both one() and two()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int one(void); int two(void); void my(void) { one(); two(); }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | $CC -x c -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c99 -c -o my.o -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Link everything together to produce libmy.so.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# `--trace-symbol=...` is a GNU linker feature.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$CC -shared -Wl,--trace-symbol&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;one -Wl,--trace-symbol&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;two -Wl,--trace-symbol&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rust_eh_personality -o libmy.so my.o libone.a libtwo.a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Success!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;sh repro.sh lto&lt;/code&gt; to see the link error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$                 &lt;span style=&#34;color:#75715e&#34;&gt;# Some filtering for brevity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sh repro.sh lto 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f2-
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;snip&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my.o: reference to one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my.o: reference to two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libone.a&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libone.rust_out.7f80e3a4-cgu.0.rcgu.o&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: definition of one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libone.a&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libone.rust_out.7f80e3a4-cgu.0.rcgu.o&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: definition of rust_eh_personality
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtwo.a&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libtwo.rust_out.7f80e3a4-cgu.0.rcgu.o&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: definition of two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtwo.a&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libtwo.rust_out.7f80e3a4-cgu.0.rcgu.o&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: in &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;rust_eh_personality&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;multiple definition of `rust_eh_personality&amp;#39;&lt;/span&gt;; libone.a&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libone.rust_out.7f80e3a4-cgu.0.rcgu.o&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;:/rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/std/src/personality/gcc.rs:244: first defined here
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;error: ld returned &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; exit status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The linker&amp;rsquo;s tracing output shows the process that leads to the conflict.
Here is an abridged version of the story to highlight the important pieces:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# expected, due to what we wrote in `my()`
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my.o: reference to one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my.o: reference to two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# The linker extracts `libone.rust_out.o` to satisfy the reference to `one`.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# The same object defines `rust_eh_personality`
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libone.a(libone.rust_out.o): definition of one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libone.a(libone.rust_out.o): definition of rust_eh_personality
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# The linker extracts `libtwo.rust_out.o` to satisfy the reference to `two`
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtwo.a(libtwo.rust_out.o): definition of two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# `libtwo.rust_out.o` also defines `rust_eh_personality`, which is already
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;# defined by `libone.rust_out.o` from earlier! Multiple definitions.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtwo.a(libtwo.rust_out.o): multiple definition of `rust_eh_personality&amp;#39;; libone.a(libone.rust_out.o): first defined here
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, but then why does it work when we disable LTO? Let&amp;rsquo;s see if the linker
trace explains it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sh repro.sh 2&amp;gt;&amp;amp;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; | cut -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; -f2-
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;snip&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my.o: reference to one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my.o: reference to two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libone.a&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libone.rust_out.7f80e3a4-cgu.0.rcgu.o&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: definition of one
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;libtwo.a&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;libtwo.rust_out.7f80e3a4-cgu.0.rcgu.o&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: definition of two
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Success!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No extracted objects define &lt;code&gt;rust_eh_personality&lt;/code&gt;, so there is no conflict!&lt;/p&gt;
&lt;p&gt;Under LTO, because of the way Rust chooses to split the staticlib into objects,
&lt;code&gt;rust_eh_personality&lt;/code&gt; comes along for the ride when linking against &lt;code&gt;one()&lt;/code&gt;
and/or &lt;code&gt;two()&lt;/code&gt;. This is a &lt;em&gt;leak of implementation detail&lt;/em&gt;. It&amp;rsquo;s reasonable to
expect &lt;code&gt;one&lt;/code&gt; and only &lt;code&gt;one&lt;/code&gt; to be available in &lt;code&gt;libone.a&lt;/code&gt;, because that&amp;rsquo;s all
we wrote in the source, but that&amp;rsquo;s not what we get. &lt;code&gt;rust_eh_personality&lt;/code&gt; is
part of the Rust&amp;rsquo;s standard library (&amp;ldquo;stdlib&amp;rdquo; here on out). In fact, &lt;code&gt;libone.a&lt;/code&gt;
defines many more symbols:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nm --just-symbols --defined-only --extern-only libone.a | wc -l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;846&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s a large interface for a one-line library!&lt;/p&gt;
&lt;h2 id=&#34;ld--r-also-known-as-partial-linking&#34;&gt;&lt;code&gt;ld -r&lt;/code&gt;, also known as &amp;ldquo;partial linking&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;To avoid potential conflicts, our goal is to trim the output of the &lt;code&gt;nm&lt;/code&gt;
invocation above. Ideally, it would just have a single line that says &lt;code&gt;one&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our simple example, &lt;code&gt;one()&lt;/code&gt; and &lt;code&gt;two()&lt;/code&gt; don&amp;rsquo;t use Rust standard library
functions, so the objects that define them in the archive don&amp;rsquo;t need to refer
to other archive member objects. When we start using standard library functions
like YJIT, we have a bit of a dilemma. With ELF and Mach-O, as far as I know,
there is no way make a symbol available solely to other members of the archive;
if it&amp;rsquo;s defined and &amp;ldquo;extern&amp;rdquo; (more about this later), it&amp;rsquo;s available to objects
inside and outside of the archive.&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; To satisfy our stdlib functions usages,
Rust can choose to put precompiled objects in the archive, but in doing so,
those symbols also become part of the external interface of the staticlib!&lt;/p&gt;
&lt;p&gt;If you believe this limitation of the object code format, you can see why using
&lt;code&gt;strip(1)&lt;/code&gt; on the archive directly doesn&amp;rsquo;t quite work. If we strip away symbols
that we use but do not intend to make available externally, internal references
within the archive break.&lt;/p&gt;
&lt;p&gt;So to trim the list of available symbols, having multiple objects in the
archive is a bit of a problem. It&amp;rsquo;d be nice if we can deal with just one
object file. That wouldn&amp;rsquo;t directly solve the problem, but it&amp;rsquo;d help. Luckily, there
is a kind of program that combines multiple object files into one file &amp;mdash; the
linker!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s common to use the linker to combine multiple object files into a shared
library or an executable. A lesser-known operation is merging multiple object
files into one object file. It&amp;rsquo;s not a feature that all the linkers have, but
it&amp;rsquo;s supported by the GNU linker, Xcode&amp;rsquo;s linker (ld64), and &lt;a href=&#34;https://github.com/illumos/illumos-gate/blob/8b0ccc49c4d0c1ac61668d047d9e8f14ca9ff6f3/usr/src/man/man1/ld.1#L653-L663&#34;&gt;illumos&#39;
linker&lt;/a&gt;.
Linux uses this functionality to build kernel modules; the Glasgow Haskell Compiler
apparently also &lt;a href=&#34;https://github.com/rui314/mold/issues/289#issue-1110017351&#34;&gt;uses it&lt;/a&gt;.
On Linux platforms that use &lt;a href=&#34;https://www.gnu.org/software/binutils/&#34;&gt;GNU Binutils&lt;/a&gt;, it
should work pretty well.&lt;/p&gt;
&lt;p&gt;The macOS manual page for &lt;code&gt;strip(1)&lt;/code&gt; actually
&lt;a href=&#34;https://github.com/opensource-apple/cctools/blob/fdb4825f303fd5c0751be524babd32958181b3ed/man/strip.1#L117-L129&#34;&gt;mentions&lt;/a&gt;
using &lt;code&gt;ld -r&lt;/code&gt; and &lt;code&gt;strip&lt;/code&gt; to trim the symbol list down to an intended list &amp;mdash;
&lt;code&gt;ld -r&lt;/code&gt; seems to be the right path!&lt;/p&gt;
&lt;p&gt;CRuby already happens to have a configuration that uses &lt;code&gt;ld -r&lt;/code&gt;. It&amp;rsquo;s for the
original flavor of DTrace first shipped in Solaris, nowadays more easily
accessible through &lt;a href=&#34;https://www.illumos.org/&#34;&gt;illumos&lt;/a&gt;. There is a &lt;a href=&#34;https://github.com/ruby/ruby/blob/31819e82c88c6f8ecfaeb162519bfa26a14b21fd/template/Makefile.in#L510-L512&#34;&gt;link&lt;/a&gt; in the
Makefile to a 2005 &lt;a href=&#34;https://marc.info/?l=opensolaris-dtrace-discuss&amp;amp;m=114761203210735&amp;amp;w=4&#34;&gt;mailing list conversation&lt;/a&gt; between Bryan
Cantrill and Rich Lowe that explains why this setup was necessary. It&amp;rsquo;s awesome
that &lt;a href=&#34;https://marc.info&#34;&gt;marc.info&lt;/a&gt; kept a record of that conversation! To
overly simplify, collapsing the whole archive into one object file works around
the linker not naturally extracting archive members important to DTrace.
Remember the selective extraction behavior mentioned &lt;a href=&#34;#earlier&#34;&gt;earlier&lt;/a&gt;? As a
side note, while evaluating &lt;code&gt;ld -r&lt;/code&gt; as an option for Rust integration, I ran
into an illumos &lt;a href=&#34;https://www.illumos.org/issues/14722&#34;&gt;linker bug&lt;/a&gt; when trying
to build Ruby without any Rust. Rich, from that mailing list conversation,
responded to my report and fixed the bug quickly. I felt like I was directly
interacting with computing history during that experience. Thanks, Rich!&lt;/p&gt;
&lt;p&gt;Being able to work with a single object file instead of an archive also eases
some unrelated integration pain for YJIT. As a component of Ruby, YJIT needs to
fit into &lt;code&gt;libruby-static.a&lt;/code&gt; &amp;mdash; it&amp;rsquo;s not a separate library. To do this, we
used to
&lt;a href=&#34;https://github.com/ruby/ruby/blob/v3_2_1/template/Makefile.in#L322-L330&#34;&gt;merge&lt;/a&gt;
&lt;code&gt;libyjit.a&lt;/code&gt; into &lt;code&gt;libruby-static.a&lt;/code&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. This was a
build process complication specific to YJIT. On the other hand, the build
system already links many object files for C. Adding yet another object file to
the mix is a smaller, better rehearsed change.&lt;/p&gt;
&lt;p&gt;Great, &lt;code&gt;ld -r&lt;/code&gt; makes a self-contained &lt;code&gt;libyjit.o&lt;/code&gt; out of the &lt;code&gt;libyjit.a&lt;/code&gt; output
from Rust. Can we get Rust to output &lt;code&gt;libyjit.o&lt;/code&gt; directly instead of getting it
from a partial link? There is &lt;code&gt;--emit=obj&lt;/code&gt;, but it&amp;rsquo;s intended for debugging
Rust itself. The output object from that option has references to Rust internal
libraries, so to link successfully we&amp;rsquo;d need to figure out a list of things to
pass to the linker, which themselves can end up leaking symbols. Also, upstream
&lt;a href=&#34;https://github.com/mesonbuild/meson/pull/11213#issuecomment-1366541458&#34;&gt;seems to not want you to rely on it as a stable interface&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;shared-libraries-and--fvisibilityhidden&#34;&gt;Shared libraries and &lt;code&gt;-fvisibility=hidden&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve been avoiding the verb &amp;ldquo;export&amp;rdquo; for describing the act of making some
symbol available for linking. This is because at the object file format and the
static library format level, there is not really a direct encoding for whether
a symbol is exported or not. When building a shared object, it&amp;rsquo;s a bit more
clear. Mach-O dylibs encode all symbol exports in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Trie&#34;&gt;trie&lt;/a&gt;; &lt;code&gt;objdump --exports-trie&lt;/code&gt; lets you inspect it. Simple. For ELF shared libraries, the
definition for an &amp;ldquo;exported symbol&amp;rdquo; is &lt;a href=&#34;http://www.m4b.io/elf/export/binary/analysis/2015/05/25/what-is-an-elf-export.html&#34;&gt;a bit more complicated&lt;/a&gt;.
Hmm, maybe avoiding the word wasn&amp;rsquo;t a great idea.&lt;/p&gt;
&lt;p&gt;Anyways, we also want to curate the exported symbols list when building a
shared library. Instead of build-time errors, shared library symbol conflicts
can show up as &lt;em&gt;runtime crashes&lt;/em&gt;. That sounds worse.&lt;/p&gt;
&lt;p&gt;A way do this with ELF and Mach-O is through symbol attributes. There is
&amp;ldquo;hidden&amp;rdquo; on ELF, and &amp;ldquo;private external&amp;rdquo; on Mach-O. With C
code, using &lt;code&gt;gcc&lt;/code&gt; or &lt;code&gt;clang&lt;/code&gt;, a way to make these symbols is through the
&lt;code&gt;-fvisibility=hidden&lt;/code&gt; option, so I&amp;rsquo;ll refer to these as &amp;ldquo;hidden symbols&amp;rdquo; from
here on out. In the final link that produces the shared object file, hidden
symbols are not exported. The idea with &lt;code&gt;-fvisibility=hidden&lt;/code&gt; is that it makes
all symbols hidden by default, which then allows you select the few symbols you
wish to export by marking them as not hidden. It&amp;rsquo;s an allowlist setup rather
than a blocklist one &amp;mdash; great for intentional curation.&lt;/p&gt;
&lt;p&gt;Whether a symbol is hidden is a separate attribute from whether it is &lt;code&gt;extern&lt;/code&gt;,
short for &amp;ldquo;external&amp;rdquo;. From what we saw earlier, duplicate external symbols
cause conflicts when linking statically. Does making an external symbol hidden
solve the conflict? Let&amp;rsquo;s try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This is hidden-and-extern.sh.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# We were with ELF earlier, let&amp;#39;s switch to Mach-O now.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run in an empty directory.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CC&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;clang
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-fvisibility=hidden -x c -std=c99 -c&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -o errexit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -o nounset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set -o xtrace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# First definition of h_and_e()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extern void h_and_e(void) {}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | $CC $CFLAGS -o h1.o -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Second definition of h_and_e()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;printf &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extern void h_and_e(void) { __builtin_trap(); }&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    | $CC $CFLAGS -o h2.o -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Show symbol attributes for both definitions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# (this assumes you have a recent Xcode toolchain, which ships llvm-nm)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nm -f darwin h1.o h2.o | grep h_and_e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Try linking to make a shared library&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$CC -shared -o libmy.dylib h1.o h2.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No, hidden external symbols conflict too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ sh hidden-and-extern.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ printf %s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extern void h_and_e(void) {}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ clang -fvisibility&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hidden -x c -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c99 -c -o h1.o -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ printf %s &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;extern void h_and_e(void) { __builtin_trap(); }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ clang -fvisibility&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hidden -x c -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c99 -c -o h2.o -
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ nm -f darwin h1.o h2.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ grep h_and_e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;__TEXT,__text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; private external _h_and_e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;__TEXT,__text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; private external _h_and_e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;+ clang -shared -o libmy.dylib h1.o h2.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;duplicate symbol &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;_h_and_e&amp;#39;&lt;/span&gt; in:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    h1.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    h2.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ld: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; duplicate symbol &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; architecture arm64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clang: error: linker command failed with exit code &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;use -v to see invocation&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On Mach-O, these &lt;code&gt;private external&lt;/code&gt; symbols have both the &lt;a href=&#34;https://github.com/apple/darwin-xnu/blob/8f02f2a044b9bb1ad951987ef5bab20ec9486310/EXTERNAL_HEADERS/mach-o/nlist.h#L118&#34;&gt;&lt;code&gt;N_PEXT&lt;/code&gt;&lt;/a&gt; and the
&lt;code&gt;N_EXT&lt;/code&gt; bit set &amp;mdash; they are separate attributes. Because &lt;code&gt;N_PEXT&lt;/code&gt; sounds like
&amp;ldquo;private external&amp;rdquo;, you may wonder what it means for a symbol to have &lt;code&gt;N_PEXT&lt;/code&gt;
set, but &lt;code&gt;N_EXT&lt;/code&gt; clear. Those symbols are in fact non-external, &lt;code&gt;N_PEXT&lt;/code&gt;
&lt;a href=&#34;https://github.com/llvm/llvm-project/blob/86cbf3d5f8a208e1129b4d75383ef792f1d8a4aa/llvm/tools/llvm-nm/llvm-nm.cpp#L486-L507&#34;&gt;tracks&lt;/a&gt; what the symbol once was:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int main(void) {}&amp;#39;&lt;/span&gt; | cc -fvisibility&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;hidden -x c -std&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c99 - | nm -f darwin a.out | grep main
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;0000000100003fb0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;__TEXT,__text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; non-external &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;was a private external&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; _main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Non-external symbols (&lt;code&gt;N_EXT&lt;/code&gt; bit is clear) in the input to the final link are
naturally not exported. This makes sense considering the semantics of the
language features that produce these symbols. Think &lt;code&gt;static&lt;/code&gt; functions in C and
private functions in Rust. These symbols also don&amp;rsquo;t cause link-time conflicts
when linking statically.&lt;/p&gt;
&lt;p&gt;Rust 1.67.1 doesn&amp;rsquo;t provide a language feature for making hidden symbols. Also,
most external symbols defined by stdlib inside Rust&amp;rsquo;s staticlib output are not
hidden. On Darwin, you can run &lt;code&gt;echo | rustc --crate-type=staticlib - &amp;amp;&amp;amp; nm -f darwin --defined-only --extern-only --no-llvm-bc librust_out.a | less&lt;/code&gt;
to see.
There are some &lt;code&gt;private external&lt;/code&gt; symbols from &lt;code&gt;compiler-builtins&lt;/code&gt;, a Rust
internal crate, but they are &lt;a href=&#34;https://github.com/rust-lang/compiler-builtins/blob/5511f3087255236680eefb862458ed2f90e11bb5/build.rs#L179&#34;&gt;built from C code using
&lt;code&gt;-fvisibility=hidden&lt;/code&gt;&lt;/a&gt;!
This &lt;code&gt;-fvisibility=hidden&lt;/code&gt; option wasn&amp;rsquo;t available since day one; the first GCC
version to have it was 4.0.0, first released in 2005. Maybe Rust will gain a
similar capability in the future. &lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;CRuby used to support GCC 3, which doesn&amp;rsquo;t have &lt;code&gt;-fvisibility=hidden&lt;/code&gt;. To
remove undesired exports, CRuby used &lt;a href=&#34;https://sourceware.org/binutils/docs-2.40/binutils/objcopy.html&#34;&gt;&lt;code&gt;objcopy(1)&lt;/code&gt;&lt;/a&gt; to
&lt;a href=&#34;https://github.com/ruby/ruby/commit/a2a53430330e8d010a479c6e85e9f2cf178efdf0&#34;&gt;post-process&lt;/a&gt; the &lt;code&gt;libruby.so&lt;/code&gt; shared object after the final
link.&lt;/p&gt;
&lt;p&gt;Maybe we can use &lt;code&gt;objcopy&lt;/code&gt; to process &lt;code&gt;libyjit.o&lt;/code&gt; too. Sure enough, there is
&lt;code&gt;--keep-global-symbol&lt;/code&gt;, which instructs it to turn all but the global symbols
named by the option to be &lt;em&gt;not&lt;/em&gt; global!&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; For our purpose of dodging symbol
conflicts, &amp;ldquo;globalness&amp;rdquo; in ELF is equivalent to &amp;ldquo;externalness&amp;rdquo; in Mach-O.&lt;/p&gt;
&lt;p&gt;The invocation ends up being basically &lt;code&gt;objcopy --wildcard --keep-global-symbol=&#39;rb_*&#39; libyjit.o&lt;/code&gt; since we already prefix all the symbols
we want to make available with &lt;code&gt;rb_&lt;/code&gt;. This pretty much completes curation for
both Ruby configurations. For the static library configuration, the &lt;em&gt;hundreds&lt;/em&gt;
of symbols Rust stdlib defines are turned non-external, leaving just a handful
of &lt;code&gt;rb_*&lt;/code&gt; symbols we intend to make available.
For the shared library configuration, we also don&amp;rsquo;t end up exporting Rust
stdlib symbols. The &lt;code&gt;rb_&lt;/code&gt; symbols we define in &lt;code&gt;libyjit.o&lt;/code&gt; &lt;em&gt;are&lt;/em&gt; exported because
they are not hidden, but that&amp;rsquo;s acceptable. They&amp;rsquo;re prefixed with &lt;code&gt;rb_&lt;/code&gt; like
the rest of Ruby symbols and don&amp;rsquo;t show in Ruby&amp;rsquo;s public headers. We&amp;rsquo;ve shrunk
the surface for conflicts by a lot.&lt;/p&gt;
&lt;h2 id=&#34;curating-symbols-on-macos-without-objcopy&#34;&gt;Curating symbols on macOS without &lt;code&gt;objcopy&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;As a part of GNU Binutils, &lt;code&gt;objcopy&lt;/code&gt; is quite ubiquitous. It&amp;rsquo;s not part of
Xcode Command Line Tools on macOS, though. There is no first party prebuilt
binaries for CRuby, so users build from source all the time. To not place yet
another tool installation burden on users, it&amp;rsquo;d be nice if we could curate
symbols without relying on &lt;code&gt;objcopy&lt;/code&gt;. I&amp;rsquo;m already asking people to install Rust
if they want YJIT.&lt;/p&gt;
&lt;p&gt;This is where I went combing through ld64&amp;rsquo;s manual for anything relevant. There
is &lt;code&gt;-exported_symbol&lt;/code&gt;, which seems very similar to &lt;code&gt;objcopy&lt;/code&gt;&amp;rsquo;s
&lt;code&gt;--keep-global-symbol&lt;/code&gt;, it even takes wildcards. Using a wildcard doesn&amp;rsquo;t quite
work, though. It also modifies undefined symbols that &lt;code&gt;libyjit.a&lt;/code&gt; references
which are defined in the C part of the codebase. When doing the final link,
each of these symbols it produces effective act as an assertion that there
exists an export with the same name. We use a lot of internal functions from
&lt;code&gt;libyjit.a&lt;/code&gt; that are not exported. That won&amp;rsquo;t fly.&lt;/p&gt;
&lt;p&gt;I also tried a bunch of other option combinations. I should&amp;rsquo;ve taken better
notes as to what I tried, but nothing seemed to work. &lt;code&gt;nobu&lt;/code&gt;, a longtime CRuby
maintainer, had &lt;a href=&#34;https://bugs.ruby-lang.org/issues/19255#note-1&#34;&gt;posted his
take&lt;/a&gt; on the problem on the bug
tracker, but it didn&amp;rsquo;t pass macOS CI.&lt;/p&gt;
&lt;p&gt;Thankfully, &lt;code&gt;nobu&lt;/code&gt;&amp;rsquo;s take put me on the right direction. There were just a few
wrinkles to iron out.&lt;/p&gt;
&lt;h3 id=&#34;combine-and-curate-all-in-one-go&#34;&gt;Combine and curate, all in one go&lt;/h3&gt;
&lt;p&gt;With &lt;code&gt;-exported_symbol &#39;_rb_*&#39;&lt;/code&gt;, ld64 touches too many symbols. We only want to
manipulate defined symbols, a subset of what it selects. This is possible with
&lt;code&gt;-exported_symbols_list&lt;/code&gt;. The manual talks about how global symbols &lt;em&gt;not&lt;/em&gt; in
the list are turned &lt;code&gt;private external&lt;/code&gt;, which sounds not quite enough &amp;mdash; we
saw how these symbols can still conflict earlier.&lt;/p&gt;
&lt;p&gt;But, &lt;code&gt;ld -r&lt;/code&gt; turns &lt;code&gt;private external&lt;/code&gt; symbols into conflict-free non-external
symbols! This feature is documented under the
&lt;a href=&#34;https://github.com/apple-opensource/ld64/blob/e28c028b20af187a16a7161d89e91868a450cadc/doc/man/man1/ld.1#L406-L410&#34;&gt;&lt;code&gt;-keep_private_externs&lt;/code&gt;&lt;/a&gt; section in the manual.&lt;/p&gt;
&lt;p&gt;The order of operations also works out in our favor. So, symbols not in the list
are turned &lt;code&gt;private external&lt;/code&gt;, and then turned non-external. The exported
symbols list also helps ld64 extract the right archive members. One &lt;code&gt;ld -r -exported_symbols_list&lt;/code&gt; call gives everything we want. Slick!&lt;/p&gt;
&lt;h3 id=&#34;xcodes-nm-is-llvm-nm&#34;&gt;Xcode&amp;rsquo;s &lt;code&gt;nm&lt;/code&gt; is &lt;code&gt;llvm-nm&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;What list of symbols do we give to &lt;code&gt;-exported_symbols_list&lt;/code&gt;? For YJIT, the list
is small enough that we could maintain it by hand, but then sometimes we&amp;rsquo;d need
to repeat ourselves when adding new Rust functions. &lt;code&gt;nobu&lt;/code&gt;&amp;rsquo;s branch filters the
output of &lt;code&gt;nm --defined-only --extern-only&lt;/code&gt; to generate the list. But that
errors out on CI:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;nm: error:
yjit/target/release/libyjit.a(std-1a5555b33819f218.std.0c61b6a2-cgu.0.rcgu.o):
Opaque pointers are only supported in -opaque-pointers mode (Producer:
&amp;lsquo;LLVM15.0.2-rust-1.66.0-stable&amp;rsquo; Reader: &amp;lsquo;LLVM APPLE_1_1400.0.29.102_0&amp;rsquo;)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Opaque pointer? I hardly know her! Well, I did vaguely recall that opaque
pointers are an LLVM thing. The manual for &lt;code&gt;nm(1)&lt;/code&gt; mentions that it is actually
&lt;code&gt;llvm-nm&lt;/code&gt; nowadays, and &lt;code&gt;llvm-nm&lt;/code&gt; by default decodes the LLVM bitcode bundled
within the object file. Rust&amp;rsquo;s LLVM is newer than Apple&amp;rsquo;s, and Rust&amp;rsquo;s bitcode
is using a construct from the future.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re not doing fancy cross-language LTO here and only care about the machine
code in the object files, so we just need to pass &lt;code&gt;--no-llvm-bc&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-return-of-rust_eh_personality&#34;&gt;The return of &lt;code&gt;rust_eh_personality&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Great, we can hide all the symbols we want. Let&amp;rsquo;s try linking &lt;code&gt;libyjit.o&lt;/code&gt; with
everything else&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;linking miniruby
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Undefined symbols for architecture arm64:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;_rust_eh_personality&amp;#34;, referenced from:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ___rust_try in libyjit.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ___rust_drop_panic in libyjit.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ___rust_foreign_exception in libyjit.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ld: symbol(s) not found for architecture arm64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Excuse me? It&amp;rsquo;s defined, and right there in the symbol table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ nm --no-llvm-bc --defined-only --format darwin yjit/target/debug/libyjit.o | grep rust_eh_personality
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0000000000368534&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;__TEXT,__text&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; non-external &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;was a private external&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; _rust_eh_personality
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This seems to be an ld64 bug. LLVM&amp;rsquo;s linker, &lt;a href=&#34;https://lld.llvm.org/&#34;&gt;LLD&lt;/a&gt;, links it just fine. Is the
bug in &lt;code&gt;ld -r&lt;/code&gt;? Well, I can recreate the error without any &lt;code&gt;ld -r&lt;/code&gt; involvement:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; This is test.s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; ld64 fails to link unless the following line is uncommented:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; .private_extern _my_personality
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;; lld version 15 links successfully either way.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.align&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_my_personality:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.global&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_fun&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;.align&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;_fun:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;.cfi_startproc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;; 0x9b = DW_EH_PE_pcrel | DW_EH_PE_indirect | DW_EH_PE_sdata4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;.cfi_personality&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9b&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;_my_personality&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;.cfi_endproc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ as test.s -o test.o &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; clang -shared test.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Undefined symbols &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; architecture arm64:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;_my_personality&amp;#34;&lt;/span&gt;, referenced from:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      _fun in test.o
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ld: symbol&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; not found &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; architecture arm64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I guess ld64 has special treatment for personality function references encoded
in &lt;a href=&#34;https://faultlore.com/blah/compact-unwinding/&#34;&gt;compact unwind&lt;/a&gt;. Just a guess. Apple hasn&amp;rsquo;t responded and for almost 2
years now, &lt;a href=&#34;https://opensource.apple.com/source/ld64/&#34;&gt;hasn&amp;rsquo;t released ld64&amp;rsquo;s source code&lt;/a&gt;. I&amp;rsquo;m
discouraged to dig any deeper. &lt;a href=&#34;https://lld.llvm.org/&#34;&gt;LLD&lt;/a&gt; does not have support for &lt;code&gt;ld -r&lt;/code&gt; for
Mach-O yet, but the error says to &amp;ldquo;stay tuned&amp;rdquo;. Rust ships with LLD
already so I&amp;rsquo;m looking forward to when LLD adds support.&lt;/p&gt;
&lt;p&gt;It feels like &lt;code&gt;rust_eh_personality&lt;/code&gt; always turn up in &lt;a href=&#34;https://github.com/rust-lang/rust/issues/102754&#34;&gt;weird linkage issues&lt;/a&gt;.
Fine, we&amp;rsquo;ll compromise and leave it exported for now. We hide all other
Rust stdlib symbols, though. Still a nice improvement.&lt;/p&gt;
&lt;h2 id=&#34;closing&#34;&gt;Closing&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a bit rough plugging a small piece of Rust into a larger C codebase,
y&amp;rsquo;all. There are discussions&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; upstream about improving various
aspects of the experience. Perhaps there is some opportunities for
contribution.&lt;/p&gt;
&lt;p&gt;With respect to symbol leakage, I focused a lot on the problems in this post.
In practice, it may not be a high priority problem. The latest YJIT release
includes none of the mitigations discussed, and so far, we haven&amp;rsquo;t received
reports of related build issues.&lt;/p&gt;
&lt;p&gt;I remember benefiting from &lt;a href=&#34;https://viruta.org/tag/librsvg.html&#34;&gt;posts&lt;/a&gt; about
&lt;code&gt;librsvg&lt;/code&gt;&amp;rsquo;s Rust and C integration when I first started looking into using Rust
for YJIT. I figure some might find what we do in YJIT  interesting. It was fun
sorting through all the pieces involved to make this post.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;You may know about ELF&amp;rsquo;s &lt;code&gt;STV_PROTECTED&lt;/code&gt; visibility. It doesn&amp;rsquo;t do what
I described.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;As a parallel, staticlib crates can statically
link against native libraries, so Rust itself sometimes merges archives.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;Using hidden symbols is not the only avenue for avoiding undesired symbol
exports. For Mach-O, ld64 provides the &lt;code&gt;-load_hidden&lt;/code&gt; option to link against
an archive without also exporting non-private external symbols in it. For
ELF, GNU ld provides &lt;code&gt;--exclude-libs&lt;/code&gt; for this purpose. These options are
worth considering when linking against Rust staticlibs to produce a shared
library. They don&amp;rsquo;t help when making a static library, though.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;For &lt;code&gt;cdylib&lt;/code&gt; crates, where Rust does the final link (not the case in
YJIT), Rust started to trim exports starting in 1.62.0 thanks to
&lt;a href=&#34;https://github.com/rust-lang/rust/pull/95604&#34;&gt;&lt;code&gt;rust-lang/rust#95604&lt;/code&gt;&lt;/a&gt;! On
macOS, you can see this by comparing &lt;code&gt;printf &#39;%s&#39; &#39;#[no_mangle] pub extern &amp;quot;C&amp;quot; fn foo() {}&#39; | rustc +1.61.0 --crate-type=cdylib - &amp;amp;&amp;amp; dyld_info -exports librust_out.dylib&lt;/code&gt;
with a &lt;code&gt;+1.62.0&lt;/code&gt; invocation.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;Of course, &amp;ldquo;local symbols&amp;rdquo; are not the opposite of global symbols&amp;hellip;&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://internals.rust-lang.org/t/pre-rfc-stabilize-a-version-of-the-rlib-format/17558&#34;&gt;Pre-RFC: Stabilize a version of the &lt;code&gt;rlib&lt;/code&gt; format&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/104707&#34;&gt;Don&amp;rsquo;t leak non-exported symbols from staticlibs&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rust-lang/rust/issues/73632&#34;&gt;Formal support for linking rlibs using a non-Rust linker&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How I think about C99 strict aliasing rules</title>
      <link>https://alanwu.space/post/strict-aliasing/</link>
      <pubDate>Mon, 23 May 2022 22:31:37 -0400</pubDate>
      
      <guid>https://alanwu.space/post/strict-aliasing/</guid>
      <description>&lt;p&gt;Recently I was asked how I review C99 code for problems that arise from
failing to follow the so called &amp;ldquo;strict aliasing rules&amp;rdquo;. I struggled to
answer, so I thought I would write a post to hopefully make my explanation more
coherent.&lt;/p&gt;
&lt;p&gt;The strict aliasing rules can be surprising because the way optimizers take
advantage of them doesn&amp;rsquo;t mesh well with the popular belief that pointers are
&amp;ldquo;just numbers&amp;rdquo;. Ultimately, I think there are practical benefits to
understanding the rules even if you disagree with them. Popular compilers such
as GCC and Clang take advantage of the rules so knowing them can help with
debugging if for nothing else.&lt;/p&gt;
&lt;p&gt;This is just my simplified model for how C compilers make use of the rules, and
I don&amp;rsquo;t claim that it&amp;rsquo;s 100% correct. However, I have found it useful enough to
spot &lt;a href=&#34;https://marc.info/?l=ruby-core&amp;amp;m=161463889519092&#34;&gt;problems in code&lt;/a&gt; and when the code looked fine, used it to spot
&lt;a href=&#34;https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101868&#34;&gt;a problem in the compiler&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;rules&#34;&gt;What are the rules, anyways?&lt;/h1&gt;
&lt;p&gt;The relevant part in C99 is &lt;a href=&#34;https://port70.net/%7Ensz/c/c99/n1256.html#6.5p7&#34;&gt;Â§6.5p7&lt;/a&gt;, but in my head it basically boils down to
&amp;ldquo;two value accesses are disjoint when the types are different, except when one
of the types is a &lt;code&gt;char&lt;/code&gt; type&amp;rdquo;. Yes, many subtleties are out the window and it&amp;rsquo;s
not going to get me into &lt;a href=&#34;https://www.open-std.org/jtc1/sc22/wg14/&#34;&gt;WG14&lt;/a&gt;, but I think it&amp;rsquo;s a useful level of understanding
regardless.&lt;/p&gt;
&lt;p&gt;What happens when the optimizer can see that a write is disjoint with respect
to a read? It can decide to reorder the program and do the read first if it
seems profitable for performance.&lt;/p&gt;
&lt;p&gt;Here is a &lt;a href=&#34;https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAMzwBtMA7AQwFtMQByARg9KtQYEAysib0QXACx8BBAKoBnTAAUAHpwAMvAFYTStJg1AB9U8lJL6yAngGVG6AMKpaAVxYMQAZi6kHAGTwGTAA5dwAjTGIQADZSAAdUBUJbBmc3D29fROSbAUDgsJZI6LjLTGtUoQImYgJ0908fC0wrPIZq2oIC0Iio2IsauobM5oUh7qDe4v6YgEoLVFdiZHYOVwZk4GD0AFINAEFiTBIsYggNrZ2AagAqflQ5/YPdgHYAIWfr77uH692vAARa4aAGfQ5fH4KBAkAh3eIEYj/IHXCDQ2F3OYPMGQ763BFIgHArg4iGHH7XY4EZYMX6oVCkl6vQHPDgLWicACsvE8HC0pFQnEc1wUSxWmH%2BACYfLwCJo2QsANbeDQAOg0AE5XhoAByvLyvHUxSQaQ1xDkcSQ8%2BUCzi8BQgDSkOV8tmkOCwGBQL0QJBoFjxOhRciUf2B%2BjRZDALhcLx8OgEKIOiDhG3hIK1ACenB4pH9bEEAHkGLRs67SFgWIZgOJy/hjpUAG6YB3lzCqCquRM53hBRMW/m0PDhYhZ5xYG2IvAsHsLKgGYAKABqeEwAHdC/FGD2ZIIRGJ2FJd/IlGobbpJfpqyBTMZzEPwg7IAtUAjUq2ALSFyXXD/jPZAsgGoar%2BW7oIYNjIL%2BADqYi0DB4zEHg1gfmIeBMMkRhErm5SVHYEAOCMni%2BAEUxFCUeg5CkAhEZRSTUQwPTkf0vi4e0nTDC4jR6GxVQTExfTRKxEy0cJXQCTMQkLKKyyrHoiKYGsPDsly1rloKHCqEaH7GtcwDIFBMaql4qKOKQ1y4IQJBSs01zOAGQaEtKkpzLK8pzAsCCYEwZyUEqICcpIxmBV4IVhZIoX6JwVqkDOMSSqqnKkLy/IafajrOu57o%2BkgSwEPEXYhhAYaOSErBrFpMQ6ZIekGdcRleLwmD4EQSHoHo/B7qI4hHp1J4qOo5YXqQa6jvEs5RRw3LJTaGmFl2BVwqgVDXJV1W1YZXDGaZqAORGNkuW5roeaQXk%2Bf0ED%2BZInKqsanJ3Q910xElFoxSlvBpRYGUuloJ0WpKvAzpyOrGV4YPgxD4NxO9tocEdv3ZfAHqICgu3hsGFDFWjjkoNGsbxrQibEMmqblumzDEGWub5owBDFqWNqVtWtb8vWFQ2M2rb8u2nbdtwvaCK0NoPqOlPjms/JTjO/Nzguy6rhuW68rmfX7j10h9YoA3nnoBhGDeZj6MOT6XQKb4CJ%2B36/lQDCoH%2BU4oWhGFBMAv7/kSQEgR%2BYEQchMFwQhDsEKhQ7O1hQI4a07OpPYDBOFxmQkXHEkUdk9HtKJCTp6kKcsS0bR8V0me8QIHGTIUgk8SJCfEYM4lkZXXDSWKcm%2BApSluha00wxpa26fpm3bRAZkWS11m7NKvh2dj%2B0Tz4rmZcdnneb5pvKoFiUaNdW%2BcjvO%2BTTFM6SFtMSn2f59n68M3qXaX1Oj9brI76IB5YtRUlRGZVsJwfc1QP9VbUan4MebUOqyDVoeDWsgtZniGnoUaTBxoy0mt3WanB5r5S7NcZaq1tL9zqg1Hae0og2SbvDBUp0V4XSujdSQGpAr0LoQwzkL1opqVSrfB0993IqQ4ADWKIBj63QviImIV8e63wfidZUMQNSqg1BoSUGouCSnirGTkGpJSsI4EAiRcNF6/V4fwvR5CTrNmJjHSQQA%3D%3D&#34;&gt;sample&lt;/a&gt; where we can see GCC making use of the aliasing rules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;reorder&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;foo)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;foo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)foo;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;foo;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compiling with &lt;code&gt;-O2&lt;/code&gt; gives the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reorder:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rdi&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;xor&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code is using an idiom to zero out &lt;code&gt;eax&lt;/code&gt;, but the gist is that it&amp;rsquo;s returning zero.
GCC&amp;rsquo;s output has a different order than our source program; &lt;code&gt;*ptr = 1&lt;/code&gt; seems to
have no effect on the final read from &lt;code&gt;foo&lt;/code&gt;, even though one might understand
&lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;ptr&lt;/code&gt; as having the same address and expect &lt;code&gt;*ptr = 1&lt;/code&gt; to happen
before &lt;code&gt;return *foo&lt;/code&gt;, as ordered in the source code. Adding to the surprise, GCC has combined the two
indirect writes into one, seemingly via the understanding that &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;ptr&lt;/code&gt;
have the same address! There seems to be some strange contradiction.&lt;/p&gt;
&lt;p&gt;Compile with &lt;code&gt;-O2 -fno-strict-aliasing&lt;/code&gt; and we get something different:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;reorder:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;DWORD&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PTR&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;rdi&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;mov&lt;/span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ah ha! By default, when GCC gets to use the powers granted to it by the
standard, it can assume that &lt;code&gt;short&lt;/code&gt; writes have no effect on &lt;code&gt;unsigned&lt;/code&gt; reads,
but &lt;code&gt;-fno-strict-aliasing&lt;/code&gt; tells GCC to forget about that part of the standard.&lt;/p&gt;
&lt;p&gt;GCC is organized as optimization passes and separate passes don&amp;rsquo;t necessarily
share information. The strange inconsistency we saw when we compiled with default
options is likely a result of this &amp;ndash; the &lt;code&gt;mov&lt;/code&gt; and the &lt;code&gt;xor&lt;/code&gt; are likely coming from
two separate parts of the compiler that don&amp;rsquo;t share the same understanding of our
program.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://gcc.gnu.org/bugs/&#34;&gt;bug reporting guide for GCC&lt;/a&gt; has a section
about &lt;code&gt;-fno-strict-aliasing&lt;/code&gt;, perhaps because many people have been surprised
by this optimization:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To disable optimizations based on alias-analysis for faulty legacy code, the
option &lt;code&gt;-fno-strict-aliasing&lt;/code&gt; can be used as a work-around.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Oof. Okay GCC, type-based alias analysis is great and useful, but no need to judge this hard.&lt;/p&gt;
&lt;h1 id=&#34;snap-back-to-reality&#34;&gt;Snap back to reality&lt;/h1&gt;
&lt;p&gt;Let&amp;rsquo;s go look at a practical example in CRuby where we did not follow the
rules. If you&amp;rsquo;d like to follow along, you can grab this &lt;a href=&#34;https://github.com/ruby/ruby/commit/697eed63e81eff0e02226ceb6ab3bd2fd99000e3&#34;&gt;commit&lt;/a&gt; and build with
the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./autogen.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./configure cflags&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-flto LDFLAGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;-flto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ make -j8 miniruby
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ll be using GCC 11.2.0 on a GNU/Linux distribution.&lt;/p&gt;
&lt;p&gt;This example has to do with an output parameter, where we expect a function to do
a write using the out parameter before returning. The call site looks like
this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; VALUE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ID;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; st_table st_table;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb_id_table_lookup&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; rb_id_table &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;tbl, ID id, VALUE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;valp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//                                                            ^^^^
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//                                                  out param of interest
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;do_lookup&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; rb_id_table &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;const_cache, ID id)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    st_table &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ics;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rb_id_table_lookup&lt;/span&gt;(constant_cache, id, (VALUE &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;ics)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// successful lookup
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;st_foreach&lt;/span&gt;(ics, iterator_fn, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When &lt;code&gt;rb_id_table_lookup()&lt;/code&gt; returns 1, it indicates that it has written through &lt;code&gt;valp&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//... inside rb_id_table_lookup()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;valp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tbl&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;items[index].val;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; TRUE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; FALSE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s focus on the code path where the lookup succeeds and break it down into
a sequence of accesses by type:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;write &lt;code&gt;unsigned long&lt;/code&gt; aka &lt;code&gt;VALUE&lt;/code&gt; through &lt;code&gt;valp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;read &lt;code&gt;st_table *&lt;/code&gt; using the &lt;code&gt;ics&lt;/code&gt; local variable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Uh oh, &lt;code&gt;unsigned long&lt;/code&gt; and &lt;code&gt;st_table *&lt;/code&gt; are distinct types, so by the &lt;a href=&#34;#rules&#34;&gt;aliasing
rules&lt;/a&gt; the compiler is free to assume that the two accesses have no relation. If it decides
to reorder and do the read before the write, that would betray our
intention &amp;ndash; we want to make use of the output from the successful lookup so
we always want the write to happen first!&lt;/p&gt;
&lt;p&gt;Does GCC tell us anything about this mismatch between our intention and what we wrote?
Why yes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vm_method.c:146:9: warning: â€˜icsâ€™ may be used uninitialized [-Wmaybe-uninitialized]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  146 |         st_foreach(ics, rb_clear_constant_cache_for_id_i, (st_data_t) NULL);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      |         ^
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class.c: In function â€˜clear_constant_cache_iâ€™:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;vm_method.c:143:15: note: â€˜icsâ€™ declared here
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  143 |     st_table *ics;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      |               ^
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s a bit of a strange warning to get if you expect accesses to happen in source
code order. I suspect what has happened under the hood is that GCC &lt;em&gt;considered&lt;/em&gt;
putting the read before the write and while evaluating that schedule GCC detects that
it reads from an uninitialized variable. I think GCC only sees this read-before-write schedule
when interpreting the aliasing rules strictly because adding &lt;code&gt;-fno-strict-aliasing&lt;/code&gt;
makes the warning disappear.&lt;/p&gt;
&lt;p&gt;The fix for this issue makes the code write and read through the same type. If you&amp;rsquo;re
in the mood for an exercise, you can imagine what the code change looks like before
looking at the &lt;a href=&#34;https://github.com/ruby/ruby/commit/5c61caa48154e3e43ff29ab865310aa9bdd9e83a&#34;&gt;patch&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;takeaways&#34;&gt;Takeaways&lt;/h1&gt;
&lt;p&gt;This post tries to build intuition for spotting strict aliasing issues.
The analysis I showed involves distilling the program under review into accesses by
type, sort of like taking a projection of it.
The CRuby example is &lt;em&gt;interprocedural&lt;/em&gt; and to
get all the requisite information for our analysis we needed to reference two
functions in separate files. Similarly, GCC issues a warning about
the code only when we build with &lt;a href=&#34;https://gcc.gnu.org/wiki/LinkTimeOptimization&#34;&gt;link time optimization&lt;/a&gt;,
where it can reason about the two functions in separate translation units together.&lt;/p&gt;
&lt;p&gt;Have fun coding in ISO C and be careful casting pointers!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Write barriers and an old Ruby bug</title>
      <link>https://alanwu.space/post/write-barrier/</link>
      <pubDate>Thu, 22 Jul 2021 06:27:34 -0400</pubDate>
      
      <guid>https://alanwu.space/post/write-barrier/</guid>
      <description>&lt;p&gt;Here is a program that crashes Ruby 2.7.0:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform_values!{ &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;full_mark&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The crash message is scary and subtly hints at the presence of a bug:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[BUG] try to mark T_NONE object
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this post, I will explain the reason behind the crash and suggest some ways to avoid similar issues in the future.&lt;/p&gt;
&lt;h2 id=&#34;is-it-a-bug-in-the-garbage-collector&#34;&gt;Is it a bug in the garbage collector?&lt;/h2&gt;
&lt;p&gt;Since the program crashes without the help of third party C extensions and crashes even when Ruby is launched with &lt;code&gt;--disable-gems&lt;/code&gt;, it&amp;rsquo;s clear that the problem is in the Ruby runtime. Looking at the C stack trace, we can see that &lt;code&gt;gc.c&lt;/code&gt; initiates the crash. How can we prove beyond a reasonable doubt that the GC itself is guilty of this crash? It turns out, there is a method, &lt;code&gt;GC.verify_internal_consistency&lt;/code&gt; that can help us out.&lt;/p&gt;
&lt;p&gt;Adding a call to this method right after the call to &lt;code&gt;transform_values!&lt;/code&gt; in our reproducer, we get a different message:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;verify_internal_consistency_reachable_i: WB miss (O-&amp;gt;Y) T_HASH -&amp;gt; T_OBJECT
crash.rb:4: [BUG] gc_verify_internal_consistency: found internal inconsistency.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Okay, it looks like some invariant that the GC cares about is not upheld, but what is a &amp;ldquo;WB miss&amp;rdquo;?&lt;/p&gt;
&lt;h2 id=&#34;incremental-mark-and-sweep&#34;&gt;Incremental mark and sweep&lt;/h2&gt;
&lt;p&gt;WB stands for write barrier so &lt;code&gt;gc_verify_internal_consistency&lt;/code&gt; is telling us that there is a &amp;ldquo;write barrier miss&amp;rdquo;. To understand what write barriers are and what they are for, we first need to understand how the GC functions. Once upon a time, Ruby had a stop-the-world mark-and-sweep GC. &amp;ldquo;Stop-the-world&amp;rdquo; sounds grandiose, but it basically means no Ruby code is running while the GC is doing work. I made some animated slides to explain the stop-the-world GC algorithm. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;style&gt;
.hidden {
    display: none;
}
&lt;/style&gt;

&lt;div id=&#34;al-svg-1&#34;&gt;
    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
            .active-slide &gt; rect {
                stroke: #4477AA;
            }
            .active-slide &gt; text {
                fill: #4477AA;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;puts(&#34;foo&#34;)&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34; &gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34; &gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;GC.start&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;0.7em&#34;&gt;
            &lt;animate id=root1 attributeName=y dur=&#34;1.0s&#34; values=&#34;0.7em;4.3em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=180 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=205 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=root1.begin /&gt;
        &lt;/g&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=&#34;root1.begin+0.3s&#34; fill=freeze /&gt;
        &lt;/g&gt;


        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=200 y=100 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black /&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=&#34;root1.begin+0.6s&#34; fill=freeze /&gt;
        &lt;/g&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black /&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=&#34;root1.begin+0.9&#34; fill=freeze /&gt;
        &lt;/g&gt;


        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34;&gt;Code allocates objects&lt;/text&gt;

        &lt;a xlink:href=&#34;#stop-the-world-1&#34;&gt;
            &lt;rect y=&#34;170&#34; x=&#34;121&#34; width=&#34;16&#34; height=&#34;16&#34; fill=white stroke=#4477AA&gt;&lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; y=&#34;182&#34; x=&#34;129&#34; font-size=10 text-anchor=middle textLength=10 fill=#4477AA&gt;1&lt;/text&gt;
        &lt;/a&gt;
        &lt;a xlink:href=&#34;#stop-the-world-2&#34;&gt;
            &lt;rect y=&#34;170&#34; x=&#34;142&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; y=&#34;182&#34; x=&#34;150&#34; font-size=10 text-anchor=middle textLength=10 &gt;2&lt;/text&gt;
        &lt;/a&gt;
        &lt;a xlink:href=&#34;#stop-the-world-3&#34;&gt;
            &lt;rect y=&#34;170&#34; x=&#34;163&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=none&gt;&lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; y=&#34;182&#34; x=&#34;171&#34; font-size=10 text-anchor=middle textLength=10&gt;3&lt;/text&gt;

    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;puts(&#34;foo&#34;)&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34; &gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34; &gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;GC.start&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root2 attributeName=y dur=&#34;1.0s&#34; values=&#34;4.3em;5.1em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=180 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=205 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=#CCBB44 stroke=black&gt;
                &lt;animate begin=&#34;root2.begin&#34; attributeName=fill values=&#34;#CCBB44; #CCBB44; #CCBB44; #228833&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.8;1&#34; /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;


        &lt;rect width=50 height=20 x=200 y=100 fill=white stroke=black&gt;
            &lt;animate attributeName=fill dur=1s values=&#34;white;#CCBB44&#34; fill=freeze begin=&#34;root2.begin+1&#34; /&gt;
            &lt;animate attributeName=fill dur=1s values=&#34;#CCBB44;#228833&#34; fill=freeze begin=&#34;root2.begin+3.5&#34; /&gt;
        &lt;/rect&gt;
        &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
        &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black&gt;
            &lt;animate begin=&#34;root2.begin&#34; attributeName=stroke values=&#34;black; #CCBB44; #CCBB44; black&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
            &lt;animate begin=&#34;root2.begin&#34; attributeName=stroke-width values=&#34;1; 3; 3; 1&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
        &lt;/line&gt;

        &lt;rect width=50 height=20 x=238 y=130 fill=white stroke=black&gt;
            &lt;animate begin=&#34;root2.begin+1&#34; attributeName=fill dur=1s values=&#34;white;#CCBB44&#34; fill=freeze /&gt;
            &lt;animate begin=&#34;root2.begin+3.5&#34; attributeName=fill dur=1s values=&#34;#CCBB44;#228833&#34; fill=freeze /&gt;
        &lt;/rect&gt;
        &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
        &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black&gt;
            &lt;animate begin=&#34;root2.begin&#34; attributeName=stroke values=&#34;black; #CCBB44; #CCBB44; black&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
            &lt;animate begin=&#34;root2.begin&#34; attributeName=stroke-width values=&#34;1; 3; 3; 1&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
        &lt;/line&gt;

        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34;&gt;GC runs&lt;/text&gt;
        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;Starts knowing `foo` needs marking&lt;/text&gt;

        &lt;a xlink:href=&#34;#stop-the-world-1&#34;&gt;
            &lt;rect y=&#34;170&#34; x=&#34;121&#34; width=&#34;16&#34; height=&#34;16&#34; fill=white stroke=black&gt;&lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; y=&#34;182&#34; x=&#34;129&#34; font-size=10 text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
        &lt;/a&gt;
        &lt;a xlink:href=&#34;#stop-the-world-2&#34;&gt;
            &lt;rect y=&#34;170&#34; x=&#34;142&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=#4477AA fill=white&gt;&lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; y=&#34;182&#34; x=&#34;150&#34; font-size=10 text-anchor=middle textLength=10 fill=#4477AA&gt;2&lt;/text&gt;
        &lt;/a&gt;
        &lt;a xlink:href=&#34;#stop-the-world-3&#34;&gt;
            &lt;rect y=&#34;170&#34; x=&#34;163&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=none&gt;&lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; y=&#34;182&#34; x=&#34;171&#34; font-size=10 text-anchor=middle textLength=10&gt;3&lt;/text&gt;
        &lt;/a&gt;

    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;puts(&#34;foo&#34;)&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34; &gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34; &gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;GC.start&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;5.1em&#34;&gt;
        &lt;/rect&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=180 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=205 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;


        &lt;rect width=50 height=20 x=200 y=100 fill=#228833 stroke=black&gt;
        &lt;/rect&gt;
        &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
        &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black&gt;
        &lt;/line&gt;

        &lt;rect width=50 height=20 x=238 y=130 fill=#228833 stroke=black&gt;
        &lt;/rect&gt;
        &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
        &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black&gt;
        &lt;/line&gt;

        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;Done. &#34;first&#34; can be released&lt;/text&gt;

        &lt;a xlink:href=&#34;#stop-the-world-1&#34;&gt;
            &lt;rect y=&#34;170&#34; x=&#34;121&#34; width=&#34;16&#34; height=&#34;16&#34; fill=white stroke=black&gt;&lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; y=&#34;182&#34; x=&#34;129&#34; font-size=10 text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
        &lt;/a&gt;
        &lt;a xlink:href=&#34;#stop-the-world-2&#34;&gt;
            &lt;rect y=&#34;170&#34; x=&#34;142&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; y=&#34;182&#34; x=&#34;150&#34; font-size=10 text-anchor=middle textLength=10&gt;2&lt;/text&gt;
        &lt;/a&gt;
        &lt;a xlink:href=&#34;#stop-the-world-3&#34;&gt;
            &lt;rect y=&#34;170&#34; x=&#34;163&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=#4477AA fill=none&gt;&lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; y=&#34;182&#34; x=&#34;171&#34; font-size=10 text-anchor=middle fill=#4477AA textLength=10&gt;3&lt;/text&gt;
        &lt;/a&gt;

    &lt;/svg&gt;
&lt;/div&gt;


&lt;p&gt;This works okay, with one disadvantage: when there are many objects alive, the GC could pause Ruby code execution for an unacceptably long amount of time. Pausing for just 17 milliseconds in a video game could be devastating as that can easily make the game miss its frame rate target.&lt;/p&gt;
&lt;p&gt;To deal with this problem, we could break up the work the GC has to do into chunks and interleave them with Ruby code execution. To go back to the video game example, instead of pausing for say 17 milliseconds a single time, we pause for 1 millisecond 17 times, allowing Ruby code to execute between pauses. If the game has 17 milliseconds to render each frame, instead of taking up 17 milliseconds once in a while, blowing through the frame time budget, the GC now takes up 1 millisecond once in a while. The GC potentially takes longer to release garbage objects, because the total amount of work is still the same as before, but that should be okay for a lot of applications.&lt;/p&gt;

&lt;div id=&#34;al-svg-2&#34;&gt;
    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = []&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[0] &lt;&lt; &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root3 attributeName=y dur=&#34;1.0s&#34; values=&#34;.8em;2.6em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=180 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=205 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
            &lt;animate begin=root3.begin attributeName=opacity dur=1.7s values=&#34;0;1&#34; /&gt;
        &lt;/g&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=none stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=root3.begin+0.3 fill=freeze /&gt;
        &lt;/g&gt;


        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=200 y=95 fill=none stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=105 dominant-baseline=middle font-size=10 text-anchor=middle&gt;[]&lt;/text&gt;
            &lt;line x1=225 y1=95 x2=255 y2=80 stroke=black&gt;
            &lt;/line&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=&#34;root3.begin+0.7&#34; fill=freeze /&gt;
        &lt;/g&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=none stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=225 y2=115 stroke=black&gt;
            &lt;/line&gt;
        &lt;/g&gt;

        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;Code allocates objects&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#incremental-1&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-2&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-3&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-4&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = []&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[0] &lt;&lt; &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root4 attributeName=y dur=&#34;1.0s&#34; values=&#34;2.6em;3.4em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=180 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=205 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=none stroke=black&gt;
                &lt;animate begin=root4.begin attributeName=fill values=&#34;#CCBB44; #CCBB44; #CCBB44; #228833&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.8;1&#34; /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=200 y=95 fill=none stroke=black&gt;
                &lt;animate attributeName=fill dur=1s values=&#34;white;#CCBB44&#34; fill=freeze begin=root4.begin+1 /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=105 dominant-baseline=middle font-size=10 text-anchor=middle&gt;[]&lt;/text&gt;
            &lt;line x1=225 y1=95 x2=255 y2=80 stroke=black&gt;
                &lt;animate begin=root4.begin attributeName=stroke values=&#34;black; #CCBB44; #CCBB44; black&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
                &lt;animate begin=root4.begin attributeName=stroke-width values=&#34;1; 3; 3; 1&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
            &lt;/line&gt;
        &lt;/g&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=none stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=225 y2=115 stroke=black&gt;
            &lt;/line&gt;
        &lt;/g&gt;

        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;GC runs for a bit and stops halfway&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#incremental-1&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-2&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-3&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-4&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = []&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[0] &lt;&lt; &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root5 attributeName=y dur=&#34;1.0s&#34; values=&#34;3.4em;4.3em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=180 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=205 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=200 y=95 fill=#CCBB44 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=105 dominant-baseline=middle font-size=10 text-anchor=middle&gt;[]&lt;/text&gt;
            &lt;line x1=225 y1=95 x2=255 y2=80 stroke=black&gt;
            &lt;/line&gt;
        &lt;/g&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=none stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=225 y2=115 stroke=black&gt;
            &lt;/line&gt;
            &lt;animate begin=root5.begin attributeName=opacity dur=1.7s values=&#34;0;1&#34; fill=freeze /&gt;
        &lt;/g&gt;

        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;Code resumes&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#incremental-1&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-2&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-3&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-4&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = []&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[0] &lt;&lt; &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root6 attributeName=y dur=&#34;1.0s&#34; values=&#34;4.3em;5.1em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=180 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=205 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=200 y=95 fill=#CCBB44 stroke=black&gt;
                &lt;animate begin=root6.begin attributeName=fill values=&#34;#CCBB44; #CCBB44; #CCBB44; #228833&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.8;1&#34; /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=105 dominant-baseline=middle font-size=10 text-anchor=middle&gt;[]&lt;/text&gt;
            &lt;line x1=225 y1=95 x2=255 y2=80 stroke=black&gt;
            &lt;/line&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=none stroke=black&gt;
                &lt;animate attributeName=fill dur=1s values=&#34;white;#CCBB44&#34; fill=freeze begin=root6.begin+1 /&gt;
                &lt;animate attributeName=fill dur=1s values=&#34;#CCBB44;#228833&#34; fill=freeze begin=root6.begin+3.2 /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=225 y2=115 stroke=black&gt;
                &lt;animate begin=root6.begin attributeName=stroke values=&#34;black; #CCBB44; #CCBB44; black&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
                &lt;animate begin=root6.begin attributeName=stroke-width values=&#34;1; 3; 3; 1&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
            &lt;/line&gt;
        &lt;/g&gt;

        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;GC resumes and completes&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#incremental-1&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-2&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-3&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-4&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;
&lt;/div&gt;


&lt;h2 id=&#34;write-barriers&#34;&gt;Write barriers&lt;/h2&gt;
&lt;p&gt;Great, we now have an incremental GC but we have also introduced a new problem. What happens if we finish marking an object &lt;code&gt;O&lt;/code&gt;, let Ruby code execute, and the Ruby code associates &lt;code&gt;O&lt;/code&gt; with an object &lt;code&gt;J&lt;/code&gt; that would otherwise be unreachable?&lt;/p&gt;

&lt;div id=&#34;al-svg-3&#34;&gt;
    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;text class=al-code font-size=6 y=195 x=6 textLength=80&gt;Missing write barrier&lt;/text&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root7 attributeName=y dur=&#34;1.0s&#34; values=&#34;0.8em;2.6em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=190 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=215 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
            &lt;animate begin=root7.begin attributeName=opacity dur=1.7s values=&#34;0;1&#34; /&gt;
        &lt;/g&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=root7.begin+0.3 fill=freeze /&gt;
        &lt;/g&gt;


        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=200 y=100 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black /&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=root7.begin+0.6 fill=freeze /&gt;
        &lt;/g&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black /&gt;
        &lt;/g&gt;


        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;Code runs&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#missing-wb-1&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#missing-wb-2&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#missing-wb-3&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#missing-wb-4&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;text class=al-code font-size=6 y=195 x=6 textLength=80&gt;Missing write barrier&lt;/text&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root8 attributeName=y dur=&#34;1.0s&#34; values=&#34;2.6em;3.4em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=190 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=215 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=none stroke=black&gt;
                &lt;animate begin=root8.begin attributeName=fill values=&#34;#CCBB44; #CCBB44; #CCBB44; #228833&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.8;1&#34; /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=200 y=100 fill=white stroke=black&gt;
                &lt;animate attributeName=fill dur=1s values=&#34;white;#CCBB44&#34; fill=freeze begin=root8.begin+1 /&gt;
                &lt;animate attributeName=fill dur=1s values=&#34;#CCBB44;#228833&#34; fill=freeze begin=root8.begin+3.1 /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black&gt;
                &lt;animate begin=root8.begin attributeName=stroke values=&#34;black; #CCBB44; #CCBB44; black&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
                &lt;animate begin=root8.begin attributeName=stroke-width values=&#34;1; 3; 3; 1&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
            &lt;/line&gt;
        &lt;/g&gt;


        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black /&gt;
        &lt;/g&gt;


        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;GC runs and finishes marking {}&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#incremental-1&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-2&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-3&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-4&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;text class=al-code font-size=6 y=195 x=6 textLength=80&gt;Missing write barrier&lt;/text&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root9 attributeName=y dur=&#34;1.0s&#34; values=&#34;3.4em;4.3em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=190 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=215 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=200 y=100 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black&gt;
            &lt;/line&gt;
        &lt;/g&gt;


        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black /&gt;
            &lt;animate begin=root9.begin attributeName=opacity dur=1.7s values=&#34;0;1&#34; fill=freeze /&gt;
        &lt;/g&gt;


        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;Code adds new reference&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#incremental-1&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-2&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-3&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-4&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;text class=al-code font-size=6 y=195 x=6 textLength=80&gt;Missing write barrier&lt;/text&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root10 attributeName=y dur=&#34;1.0s&#34; values=&#34;4.3em;5.0em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=190 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=215 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=200 y=100 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black&gt;
            &lt;/line&gt;
        &lt;/g&gt;


        &lt;g&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black /&gt;
        &lt;/g&gt;


        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;&#34;third&#34; incorrectly treated as garbage&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#incremental-1&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-2&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-3&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#incremental-4&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;
&lt;/div&gt;


&lt;p&gt;We know &lt;code&gt;J&lt;/code&gt; is alive since &lt;code&gt;O&lt;/code&gt; is alive and all objects referenced by alive objects are also alive. However &lt;code&gt;O&lt;/code&gt; is already marked, so the GC will not mark it again to see that &lt;code&gt;O&lt;/code&gt; now refers to an object it didn&amp;rsquo;t see the first time &lt;code&gt;O&lt;/code&gt; was marked. Nevertheless, the GC cannot treat &lt;code&gt;J&lt;/code&gt; as garbage. We need some way to address this problem.&lt;/p&gt;
&lt;p&gt;We could make the Ruby code inform the GC every time it associates an object with another one. This way, when the Ruby code makes changes to an object the GC already marked the GC could be aware of objects that it potentially was unaware of at the time of marking:&lt;/p&gt;

&lt;div id=&#34;al-svg-4&#34;&gt;
    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;text class=al-code font-size=6 y=195 x=6 textLength=65&gt;With write barrier&lt;/text&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root11 attributeName=y dur=&#34;1.0s&#34; values=&#34;0.8em;2.6em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=190 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=215 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
            &lt;animate begin=root11.begin attributeName=opacity dur=1.7s values=&#34;0;1&#34; /&gt;
        &lt;/g&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=root11.begin+0.3 fill=freeze /&gt;
        &lt;/g&gt;


        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=200 y=100 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black /&gt;
            &lt;animate attributeName=opacity dur=1.7s values=&#34;0;1&#34; begin=root11.begin+0.6 fill=freeze /&gt;
        &lt;/g&gt;

        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black /&gt;
        &lt;/g&gt;


        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;Code runs&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#write-barrier-1&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-2&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-3&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-4&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;text class=al-code font-size=6 y=195 x=6 textWidth=65&gt;With write barrier&lt;/text&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root12 attributeName=y dur=&#34;1.0s&#34; values=&#34;2.6em;3.4em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=190 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=215 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=none stroke=black&gt;
                &lt;animate begin=root12.begin attributeName=fill values=&#34;#CCBB44; #CCBB44; #CCBB44; #228833&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.8;1&#34; /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=200 y=100 fill=white stroke=black&gt;
                &lt;animate attributeName=fill dur=1s values=&#34;white;#CCBB44&#34; fill=freeze begin=&#34;root12.begin+1&#34; /&gt;
                &lt;animate attributeName=fill dur=1s values=&#34;#CCBB44;#228833&#34; fill=freeze begin=root12.begin+3.1 /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black&gt;
                &lt;animate begin=root12.begin attributeName=stroke values=&#34;black; #CCBB44; #CCBB44; black&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
                &lt;animate begin=root12.begin attributeName=stroke-width values=&#34;1; 3; 3; 1&#34; fill=freeze dur=&#34;3s&#34; keyTimes=&#34;0;0.33;0.66;1&#34; /&gt;
            &lt;/line&gt;
        &lt;/g&gt;


        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black /&gt;
        &lt;/g&gt;


        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;GC runs and finishes marking {}&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#write-barrier-1&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-2&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-3&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-4&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;text class=al-code font-size=6 y=195 x=6 textWidth=65&gt;With write barrier&lt;/text&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root13 attributeName=y dur=&#34;1.0s&#34; values=&#34;3.4em;4.3em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=190 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=215 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=200 y=100 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black&gt;
            &lt;/line&gt;
        &lt;/g&gt;


        &lt;g opacity=0&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=white stroke=black&gt;
                &lt;animate attributeName=fill dur=0.8s values=&#34;white;#CCBB44&#34; begin=root13.begin+1.6 fill=freeze /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;animate attributeName=opacity dur=1.0s values=&#34;0;1&#34; fill=freeze begin=root13.begin /&gt;
            &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black&gt;
                &lt;animate attributeName=stroke-width dur=0.8s values=&#34;1;2.5;1&#34; begin=root13.begin+1 fill=freeze /&gt;
            &lt;/line&gt;
        &lt;/g&gt;


        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;Code adds new reference with write barrier&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#write-barrier-1&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-2&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-3&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-4&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;

    &lt;svg viewBox=&#34;0 0 300 200&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; class=hidden&gt;
        &lt;style&gt;
            .al-code {
                font-family: monospace;
            }
        &lt;/style&gt;
        &lt;rect width=300 height=200 fill=white stroke=&#34;grey&#34; stroke-width=&#34;5px&#34; /&gt;

        &lt;text class=al-code font-size=6 y=195 x=6 textLength=65&gt;With write barrier&lt;/text&gt;

        &lt;g transform=&#34;translate(25 10)&#34;&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;0em&#34;&gt;foo = &#34;first&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;1em&#34;&gt;foo = {}&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;2em&#34;&gt;foo[0] = &#34;second&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;3em&#34;&gt;# GC step&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;4em&#34;&gt;foo[1] = &#34;third&#34;&lt;/text&gt;
            &lt;text class=&#34;al-code&#34; font-size=15 y=&#34;1em&#34; dy=&#34;5em&#34;&gt;# GC step&lt;/text&gt;
        &lt;/g&gt;

        &lt;rect fill=&#34;#EE6677&#34; width=&#34;6&#34; height=&#34;6&#34; rx=&#34;1&#34; x=&#34;13&#34; y=&#34;1.3em&#34;&gt;
            &lt;animate id=root14 attributeName=y dur=&#34;1.0s&#34; values=&#34;4.3em;5.0em&#34; fill=freeze calcMode=spline keySplines=&#34;0.23 0.73 0.7 1&#34; /&gt;
        &lt;/rect&gt;

        &lt;text textAnchor=middle x=13 y=120 font-size=10 text-decoration=underline&gt;Legend&lt;/text&gt;
        &lt;rect fill=white width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=&#34;125&#34; /&gt;
        &lt;text class=al-code x=22 y=130 font-size=6&gt;Not marked&lt;/text&gt;
        &lt;rect fill=#CCBB44 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=134 /&gt;
        &lt;text class=al-code x=22 y=139 font-size=6&gt;Yet to be marked. Propagate, then become marked.&lt;/text&gt;
        &lt;rect fill=#228833 width=&#34;6&#34; height=&#34;6&#34; stroke=black rx=&#34;1&#34; x=&#34;13&#34; y=143 /&gt;
        &lt;text class=al-code x=22 y=148 font-size=6&gt;Marked&lt;/text&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=190 y=20 fill=white stroke=black /&gt;
            &lt;text class=&#34;al-code&#34; x=215 y=32 font-size=11 textLength=40 text-anchor=middle&gt;&#34;first&#34;&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=230 y=60 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=255 y=73 font-size=11 text-anchor=middle&gt;{}&lt;/text&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=200 y=100 fill=#228833 stroke=black&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=225 y=112 font-size=10 textLength=45 text-anchor=middle&gt;&#34;second&#34;&lt;/text&gt;
            &lt;line x1=225 y1=100 x2=255 y2=80 stroke=black&gt;
            &lt;/line&gt;
        &lt;/g&gt;

        &lt;g&gt;
            &lt;rect width=50 height=20 x=238 y=130 fill=#CCBB44 stroke=black&gt;
                &lt;animate attributeName=fill dur=1s values=&#34;#CCBB44;#228833&#34; begin=root14.begin+0.5 fill=freeze /&gt;
            &lt;/rect&gt;
            &lt;text class=&#34;al-code&#34; x=263 y=143 font-size=10 textLength=40 text-anchor=middle&gt;&#34;third&#34;&lt;/text&gt;
            &lt;line x1=263 y1=130 x2=255 y2=80 stroke=black /&gt;
        &lt;/g&gt;


        &lt;text class=&#34;al-code&#34; font-size=&#34;10&#34; text-anchor=&#34;middle&#34; x=&#34;150&#34; y=&#34;153&#34; dy=1em&gt;GC completes correctly&lt;/text&gt;

        &lt;svg viewBox=&#34;0 0 100 20&#34; width=100 height=20 y=170 x=101&gt;
            &lt;a xlink:href=&#34;#write-barrier-1&#34;&gt;
                &lt;rect y=&#34;2&#34; x=&#34;5&#34; width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=13 font-size=10 dominant-baseline=middle text-anchor=middle textLength=10 fill=black&gt;1&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-2&#34;&gt;
                &lt;rect y=2 x=26 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;34&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;2&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-3&#34;&gt;
                &lt;rect y=2 x=47 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;55&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;3&lt;/text&gt;
            &lt;/a&gt;
            &lt;a xlink:href=&#34;#write-barrier-4&#34; class=&#34;active-slide&#34;&gt;
                &lt;rect y=2 x=68 width=&#34;16&#34; height=&#34;16&#34; stroke=black fill=white&gt;&lt;/rect&gt;
                &lt;text class=&#34;al-code&#34; y=&#34;10&#34; x=&#34;76&#34; font-size=10 dominant-baseline=middle text-anchor=middle textLength=10&gt;4&lt;/text&gt;
            &lt;/a&gt;
        &lt;/svg&gt;
    &lt;/svg&gt;
&lt;/div&gt;

&lt;script&gt;
(function(){
    function setupButtons(root) {
        const slideCount = root.children.length;
        let buttons = root.querySelectorAll(&#34;svg&gt;a&#34;);
        for (let button of buttons) {
            // These are SVGAElement.
            let href = button.href.baseVal;
            let lastChar = href.charAt(href.length-1);
            let lastCharAsNum = Number.parseInt(lastChar);
            let transitionTo = lastCharAsNum-1;
            if (transitionTo &gt;= 0 &amp;&amp; transitionTo &lt; slideCount) {
                button.addEventListener(&#34;click&#34;, function(clickEv) {
                    clickEv.preventDefault(); // To prevent changing the URI fragment.
                    for (let idx=0; idx&lt;slideCount; idx++) {
                        let slideElement = root.children[idx];
                        if (idx == transitionTo) {
                            slideElement.classList.remove(&#34;hidden&#34;);
                        } else if (!slideElement.classList.contains(&#34;hidden&#34;)) {
                            slideElement.classList.add(&#34;hidden&#34;);
                        }
                    }
                    root.querySelectorAll(&#34;animate&#34;).forEach(e =&gt; {
                        // Hack for restarting the SVG animation timeline.
                        // Reinsert all elements then kick the animation on the syncbase element
                        // that all the animate elements are based off of.
                        let parent = e.parentNode;
                        parent.removeChild(e);
                        parent.insertAdjacentHTML(&#34;beforeend&#34;, e.outerHTML);
                        if (e.id.startsWith(&#34;root&#34;)) {
                            parent.children[parent.children.length-1].beginElement();
                        }
                    });
                });
            } else {
                console.error(&#34;failed finding index for transition button&#34;, button);
            }
        }
    }
    setupButtons(document.getElementById(&#34;al-svg-1&#34;));
    setupButtons(document.getElementById(&#34;al-svg-2&#34;));
    setupButtons(document.getElementById(&#34;al-svg-3&#34;));
    setupButtons(document.getElementById(&#34;al-svg-4&#34;));
})();
&lt;/script&gt;


&lt;p&gt;The write barrier is a piece of code that informs the GC every time an object starts to reference a new object. In addition to facilitating incremental GC, write barriers also help with generational GC.&lt;/p&gt;
&lt;h2 id=&#34;how-to-miss-a-write-barrier&#34;&gt;How to &amp;ldquo;miss&amp;rdquo; a write barrier&lt;/h2&gt;
&lt;p&gt;Going back to our crash reproducer, we can now guess that &lt;code&gt;Hash#transform_values!&lt;/code&gt; is missing a write barrier somewhere. After all, it&amp;rsquo;s the only thing that can mutate the object reference graph after the GC runs. &lt;a href=&#34;https://github.com/ruby/ruby/pull/2964&#34;&gt;This indeed was the problem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are many garbage collected languages that ship with compilers that can automatically insert write barriers. CRuby does not have that luxury, however, and it is up to the developers to manually insert write barriers where necessary. In this particular case a write barrier was present but erroneously removed.&lt;/p&gt;
&lt;h2 id=&#34;consequences&#34;&gt;Consequences&lt;/h2&gt;
&lt;p&gt;Missing write barriers can make the GC collect live objects and lead to &lt;a href=&#34;https://en.wikipedia.org/w/index.php?title=Use_after_free&#34;&gt;use-after-free&lt;/a&gt;. This can lead to crashes like we have seen, or worse, silent data corruption. The following program demonstrates data corruption:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hash &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;Object&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hash&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;transform_values!{ &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p hash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;GC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start(&lt;span style=&#34;color:#e6db74&#34;&gt;full_mark&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p hash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;=begin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;$ ruby -v corrupt.rb
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;ruby 2.7.0p0 (2019-12-25 revision 647ee6f091) [x86_64-darwin19]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{:a=&amp;gt;633825300114114700748351602688}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{:a=&amp;gt;&amp;#34;:a&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;=end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the GC should not have visible impact on live objects.&lt;/p&gt;
&lt;h2 id=&#34;possible-ways-to-prevent-this-in-the-future&#34;&gt;Possible ways to prevent this in the future&lt;/h2&gt;
&lt;p&gt;To quote Koichi Sasada in a &lt;a href=&#34;https://www.atdot.net/~ko1/activities/rgengc_ismm.pdf&#34;&gt;paper&lt;/a&gt; about CRuby&amp;rsquo;s write barriers:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In general, inserting WBs correctly is a difficult and time-consuming task because WB-related bugs cause critical issues and it is difficult to debug them.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Indeed, write barrier bugs can be very elusive. I certainly don&amp;rsquo;t put it past myself to accidentally introduce one. They are hard to spot by testing. To illustrate, try removing or changing lines that start with &lt;code&gt;GC&lt;/code&gt; in the reproducer &amp;ndash; a lot of the time the program doesn&amp;rsquo;t crash and appears to work correctly.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m going to suggest some ways that can make forgetting to insert and/or accidentally removing write barriers more difficult.&lt;/p&gt;
&lt;h3 id=&#34;education-and-code-reviews&#34;&gt;Education and code reviews&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s easy to forget to check for write barriers because a lot of the time one can compose the desired code change from pre-existing functions that already deal with write barriers correctly. Maybe the only thing that was stopping someone from catching this particular write barrier removal was a reminder to look for it. A gentle reminder on Github&amp;rsquo;s pull request template could make sense.&lt;/p&gt;
&lt;p&gt;I also think more people should understand write barriers enough that they know when to insert them. Write barriers form a very important contract between the GC and the rest of the virtual machine. People making changes should be aware of this contract.&lt;/p&gt;
&lt;h3 id=&#34;static-analysis&#34;&gt;Static analysis&lt;/h3&gt;
&lt;p&gt;Humans are unreliable and can easily make mistakes. It would be ideal if we could run a program and get an assessment as to whether a write barrier is missing. For this particular case, it seems reasonable to write a Clang-based static analyzer that could catch it. However, I don&amp;rsquo;t know how useful that would be for unknown cases that might reveal themselves in the future. Also, the ergonomics of static analyzers are hard to get right. Among other potential issues, just a few false alarms can make them too annoying to use.&lt;/p&gt;
&lt;p&gt;Nevertheless, maybe it&amp;rsquo;s worth it to make a best-effort static analyzer to help new contributors and experienced ones alike.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Write barriers are an important part of Ruby&amp;rsquo;s incremental GC that updates the GC&amp;rsquo;s understanding of the object reference graph&lt;/li&gt;
&lt;li&gt;CRuby developers are responsible for manually inserting write barriers wherever necessary&lt;/li&gt;
&lt;li&gt;Failing to insert write barriers can cause catastrophic failures such as crashes and data corruption&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;This is a textbook tri-color mark algorithm. Typically, the three colors are white, grey, and black. I chose different colors in an effort to help &lt;a href=&#34;https://davidmathlogic.com/colorblind&#34;&gt;colorblind&lt;/a&gt; readers.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Checking Ruby C extensions for object movement crashes</title>
      <link>https://alanwu.space/post/check-compaction/</link>
      <pubDate>Tue, 26 Jan 2021 19:58:24 -0500</pubDate>
      
      <guid>https://alanwu.space/post/check-compaction/</guid>
      <description>&lt;p&gt;This guide intends to help Ruby native extension maintainers upgrade libraries to be compatible with &lt;code&gt;GC.compact&lt;/code&gt;. Application developers can also use this guide to check applications for compaction compatibility. At the time of writing, the latest Ruby release is version 3.0.0.&lt;/p&gt;
&lt;h3 id=&#34;using-automated-tests-to-surface-crashes&#34;&gt;Using automated tests to surface crashes&lt;/h3&gt;
&lt;p&gt;If your test suite runs under Ruby 2.7.0 or newer, it is possible to check for compaction crashes with a small addition to your test suite.&lt;/p&gt;
&lt;p&gt;Add the following line such that it runs after all the code in the test suite finishes loading, but before any tests run. For libraries, this usually means inserting after &lt;code&gt;require &amp;quot;library_name&amp;quot;&lt;/code&gt; during test setup.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GC.verify_compaction_references(double_heap: true, toward: :empty)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Look for crash ouputs similar to that of &lt;code&gt;ruby -e &#39;Process.kill(:SEGV, $$)&#39;&lt;/code&gt; and unexpected &lt;code&gt;TypeErorr&lt;/code&gt;s. APIs such as &lt;code&gt;rb_raise&lt;/code&gt; can raise &lt;code&gt;TypeError&lt;/code&gt; when given invalid references.&lt;/p&gt;
&lt;h3 id=&#34;one-common-mistake&#34;&gt;One common mistake&lt;/h3&gt;
&lt;p&gt;A common pitfall that causes object movement bugs is saving objects created with Ruby code into global variables. This is usually done with &lt;code&gt;rb_const_get&lt;/code&gt; or similar in the extension&amp;rsquo;s &lt;code&gt;Init_library_name&lt;/code&gt; routine. Often the object saved into the C global is a class or a module defined in Ruby code.&lt;/p&gt;
&lt;p&gt;The GC can decide to move the object the C global refers to, invalidating the &lt;code&gt;VALUE&lt;/code&gt;. The extension is likely to trigger a crash when it makes use of stale references.&lt;/p&gt;
&lt;p&gt;Extensions can solve this problem by calling &lt;code&gt;rb_gc_register_mark_object&lt;/code&gt; on objects created in Ruby that are saved into C globals. This API tells the GC to not move specific objects. It is worth noting that this API should be used sparingly, as limiting object movement makes compaction less effective. Also, the GC never collects objects passed to this API, so misuse can create memory leaks.&lt;/p&gt;
&lt;p&gt;The following C APIs create modules that never move. It is not necessary to use &lt;code&gt;rb_gc_register_mark_object&lt;/code&gt; on objects created with these APIs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rb_define_class&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rb_define_module&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rb_define_class_under&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rb_define_module_under&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an alternative to saving references into globals, extensions can fetch constants at the time they are needed using APIs such as &lt;code&gt;rb_const_get&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;bug-exists-even-in-absence-of-compaction&#34;&gt;Bug exists even in absence of compaction&lt;/h3&gt;
&lt;p&gt;Extensions that follow the pattern above can cause crashes in Ruby releases that never move objects. The object saved into a constant in Ruby code can be removed from that constant via means such as &lt;code&gt;Module#remove_const&lt;/code&gt; and be collected by the GC, invalidating the &lt;code&gt;VALUE&lt;/code&gt; stored in the C global. See this &lt;a href=&#34;https://github.com/msgpack/msgpack-ruby/issues/133&#34;&gt;issue&lt;/a&gt; for an example of this happening in a popular gem.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;p&gt;Here is a demo that contains the discussed failure pattern. For an exercise, try to fix the object movement bug.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/env ruby&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# frozen_string_literal: true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This demo contains an object movement bug.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Run in an empty directory.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Write out code for C extension&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;File&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;write(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ext.c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;lt;&amp;lt;-EOM)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include &amp;#34;ruby.h&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;static &lt;span style=&#34;color:#66d9ef&#34;&gt;VALUE&lt;/span&gt; cLuckError;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;luck_trial(&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUE&lt;/span&gt; self)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rb_raise(cLuckError, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;insufficient luck&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;void
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Init_bad&lt;/span&gt;(void)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cLuckError &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rb_const_get(rb_cObject, rb_intern(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;LuckError&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rb_define_global_function(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;luck_trial&amp;#34;&lt;/span&gt;, luck_trial, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;EOM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LuckError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StandardError&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Compile the C extension&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;spawn(&lt;span style=&#34;color:#66d9ef&#34;&gt;Gem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ruby, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-rmkmf&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-e&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;create_makefile(&amp;#34;bad&amp;#34;)&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Process&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;wait
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`make clean`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`make`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Load the C extension. Initialization runs.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;require_relative &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;bad&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; defined?(&lt;span style=&#34;color:#66d9ef&#34;&gt;GC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;verify_compaction_references) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;method&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Ask the GC to move objects around&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;GC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;verify_compaction_references(&lt;span style=&#34;color:#e6db74&#34;&gt;double_heap&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;toward&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;:empty&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Trigger the bug without doing any object movement by making&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# LuckError unreachable. Compatible with Ruby 2.5.x.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;LuckError&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;times { &lt;span style=&#34;color:#66d9ef&#34;&gt;GC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;start }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Use the extension&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  luck_trial
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;rescue&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; e
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  puts &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;e&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;class&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;#{&lt;/span&gt;e&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For real-world references, here are a few pull requests that fix object movement bugs in popular gems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/brianmario/mysql2/pull/1115&#34;&gt;https://github.com/brianmario/mysql2/pull/1115&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/semian/pull/275&#34;&gt;https://github.com/Shopify/semian/pull/275&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohler55/oj/pull/638&#34;&gt;https://github.com/ohler55/oj/pull/638&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;closing-thoughts&#34;&gt;Closing thoughts&lt;/h3&gt;
&lt;p&gt;The GC&amp;rsquo;s abaility to compact the heap allows for memory savings and can improve execution performance. It is key to the runtime&amp;rsquo;s evolution. If you are a library maintainer, thank you for enabling people to use compaction!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Special thanks to &lt;a href=&#34;https://twitter.com/tenderlove/&#34;&gt;Aaron Paterson&lt;/a&gt; for helping with this guide and for developing the compacting GC&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hotkeys For Programmable Keyboards</title>
      <link>https://alanwu.space/post/k-type/</link>
      <pubDate>Thu, 24 Dec 2020 15:15:12 -0500</pubDate>
      
      <guid>https://alanwu.space/post/k-type/</guid>
      <description>&lt;p&gt;I have a &lt;a href=&#34;https://kono.store/products/k-type-mechanical-keyboard&#34;&gt;K-Type&lt;/a&gt;, which is a programmable keyboard that lets me
configure custom hotkeys. The configurations live with and on the keyboard,
which is neat. Among other things, this lets my configuration work across
different operating systems.&lt;/p&gt;
&lt;p&gt;My current configuration has several navigation hotkeys that activate with the
&lt;code&gt;CAPSLOCK&lt;/code&gt; key. &lt;code&gt;CAPSLOCK+{j,k,l,;}&lt;/code&gt; send arrow keys, in a way similar to Vim&amp;rsquo;s
default normal mode bindings. &lt;code&gt;CAPSLOCK+{i,n}&lt;/code&gt; gives page up and down, while
&lt;code&gt;CAPSLOCK+{h,quote}&lt;/code&gt; sends &lt;code&gt;HOME&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt;. This hotkey cluster lets me scroll
and move cursors without having to take my right hand away from the home row
(index finger on &lt;code&gt;j&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;In addition to these, I have &lt;code&gt;CAPSLOCK+SPACE&lt;/code&gt; sending &lt;code&gt;CONTROL&lt;/code&gt; and
&lt;code&gt;CAPSLOCK&lt;/code&gt;+&lt;code&gt;S&lt;/code&gt; sending &lt;code&gt;SHIFT&lt;/code&gt;. One of my favorite use of these is pressing
&lt;code&gt;CAPSLOCK+SPACE+{i,n}&lt;/code&gt; to send &lt;code&gt;CONTROL+{PAGEUP,PAGEDOWN}&lt;/code&gt;, which lets me
switch between tabs in Firefox and Chrome without moving from home row. These
also allow me to select text in input boxes.&lt;/p&gt;
&lt;p&gt;The K-Type has a bunch of RGB LEDs, which I prefer to be off most of the time.
When I first tried to program it in 2017, the provided user-friendly tools
didn&amp;rsquo;t give a way to make the board boot with LEDs off. I found myself turning
off the lights every time I booted up my computer.  Eventually, I bit the
bullet and dug into the firmware&amp;rsquo;s code and &lt;a href=&#34;https://github.com/XrXr/kiibohd-controller/blob/8240bc27bc5bf834a9228c972e10c6d1337546ec/Scan/Devices/ISSILed/led_scan.c#L828&#34;&gt;figured out&lt;/a&gt; a
way to have the lights off by default. Thankfully the firmware is all open
source, the board is hard to brick, and I knew C well enough.&lt;/p&gt;
&lt;p&gt;I found my current &lt;code&gt;CAPSLOCK&lt;/code&gt; setup on a 60% custom keyboard I built with the
&lt;a href=&#34;https://cannonkeys.com/products/preorder-instant60-pcb&#34;&gt;Instant60&lt;/a&gt;. It&amp;rsquo;s too small to have dedicated keys for some
navigation keys which pushed me to come up with a solution. Unfortunately,
my 60% board broke. It started to frequently drop key presses for a column of
keys after a few months of use. I don&amp;rsquo;t have the means to repair the PCB, so
I&amp;rsquo;m back to using the K-Type.&lt;/p&gt;
&lt;p&gt;When trying to add hotkeys to my old K-Type configuration, I found that it
doesn&amp;rsquo;t build anymore. It was kind of a pain to coerce the updated build
system to pick up my custom configuration, but I got there. My
&lt;a href=&#34;https://github.com/XrXr/kiibohd-controller/commit/ee286b741281dbf5a937a750483bfc3399f4725d&#34;&gt;configuration&lt;/a&gt; now lives in a single repository instead of being
spread across two, which is nice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Compiler</title>
      <link>https://alanwu.space/post/my-compiler/</link>
      <pubDate>Sun, 20 Jan 2019 11:11:06 -0500</pubDate>
      
      <guid>https://alanwu.space/post/my-compiler/</guid>
      <description>&lt;p&gt;The first commit I made for my compiler was in 2016, it read &amp;ldquo;Here&amp;rsquo;s hoping I get this done in time&amp;rdquo;.
I&amp;rsquo;m not sure if I met the deadline that message was referring to, but the compiler is certainly &amp;ldquo;done&amp;rdquo; now.&lt;/p&gt;
&lt;p&gt;Of course, no one in the right mind would use the compiler for anything serious, but the &lt;a href=&#34;https://www.github.com/XrXr/alang&#34;&gt;compiler&lt;/a&gt; compiles code,
and I&amp;rsquo;ve made a simple graphical &lt;a href=&#34;https://www.github.com/XrXr/souvenir&#34;&gt;app launcher&lt;/a&gt; using it.&lt;/p&gt;
&lt;p&gt;I mostly want to talk about the human aspects of this project. I find a lot of technical stuff in the project interesting
too, but as somebody who is very much a novice at building compilers, I don&amp;rsquo;t think I bring much to the
table talking about compiler construction.&lt;/p&gt;
&lt;h3 id=&#34;how-it-started&#34;&gt;How it started&lt;/h3&gt;
&lt;p&gt;I started the project in the summer of 2016. As a co-op student, I was supposed to intern at a company. Everyone seemed
to have found jobs for the summer, but I didn&amp;rsquo;t. I felt really bitter that people who I considered less competent than me
were able to find jobs while I was left jobless. I felt the need to get better, I felt resentment.&lt;/p&gt;
&lt;p&gt;Thinking back, the reason I didn&amp;rsquo;t find a job was probably that I started
searching too late. Most companies have filled their internship quota by the time I started looking.
It turned out that resentment wasn&amp;rsquo;t a very effective fuel for me. I would put in an hour of work every day, even though
I basically had nothing else to do. I wanted to build the compiler from scratch as much as possible, and
there were a lot of problems I had to focus and think about for extended periods of time. Watching YouTube videos
and playing games is much easier to do than thinking hard.&lt;/p&gt;
&lt;p&gt;As much as I wanted to force myself to work on a project so I can impress potential employers, not much work was done
on the compiler during the summer of 2016.&lt;/p&gt;
&lt;h3 id=&#34;reboot-and-critical-mass&#34;&gt;Reboot and critical mass&lt;/h3&gt;
&lt;p&gt;I stopped working on the compiler when the summer ended and didn&amp;rsquo;t work on it at all for most of 2017. In December of
2017, I got the idea to work on the compiler again. I wanted to prove to myself that I can build a compiler, I also
wanted a sort of souvenir for my time at the university. Jonathan Blow&amp;rsquo;s compiler development livestreams were also a source of inspiration.&lt;/p&gt;
&lt;p&gt;I got loops and procedures working in December. These two features, along with the support for conditionals I implemented in 2016, made the compiler feel tangible and actually sort of usable. Working on the compiler didn&amp;rsquo;t feel like a drag anymore, every commit felt like real progress.&lt;/p&gt;
&lt;h3 id=&#34;how-it-got-finished&#34;&gt;How it got finished&lt;/h3&gt;
&lt;p&gt;I graduated from school in April of 2018. I had the privilege to take a 4-month break before starting work, so I used a lot
of that time on the compiler. The compiler presented more and more interesting problems as it matured. Even though I reached my original goal of making &lt;a href=&#34;https://www.github.com/XrXr/souvenir&#34;&gt;an app launcher&lt;/a&gt; using my language, I kept working on the compiler because it proved to be an interesting sandbox for me to try out different ideas. The world was my oyster and I had the freedom and time to implement whatever I wanted. I had fun working on the compiler.&lt;/p&gt;
&lt;h3 id=&#34;was-it-worth-it&#34;&gt;Was it worth it?&lt;/h3&gt;
&lt;p&gt;I am proud of my compiler. The code is nothing I would consider exemplary. Many would probably call it &amp;ldquo;unmaintainable&amp;rdquo;, and they would be right.
However, I&amp;rsquo;m still proud of the project. I learned a lot working on this project and part of what I learned was why some of the decisions
I made in the compiler were terrible. If I were to work on this compiler again, the first thing I would do is rewrite many
parts of it.&lt;/p&gt;
&lt;p&gt;I feel that I have overcome many obstacles and came out of the other side with two pieces of real, usable software.
&lt;a href=&#34;https://www.github.com/XrXr/souvenir&#34;&gt;souvenir&lt;/a&gt;, the application launcher I made using the compiler, is installed on my machine at home and I use it every day.&lt;/p&gt;
&lt;p&gt;I think I will always look back at the time I worked on the compiler fondly. Not many people get to write software
just for the sake of it and I doubt I will get to do something like this again anytime soon. I am thankful for everything
that contributed to this unique experience.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
